<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSH登录及其原理详解</title>
    <url>/6d82e825daef.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文主要讲解了什么是<code>SSH</code>以及<code>SSH</code>协议口令验证登录和公钥登录等两种登录方式的原理，同时演示了如何用<code>SSH</code>连接<code>Github</code>。</p>
<h4 id="SSH-是什么"><a href="#SSH-是什么" class="headerlink" title="SSH 是什么"></a>SSH 是什么</h4><p><code>SSH</code>的全称为<code>Secure Shell</code>，即安全外壳协议。它是一种专为远程登陆会话和网络服务提供安全性的应用层协议。说白了就是用来连接服务器的一种方式。</p>
<p>在<code>SSH</code>的加密原理中，就用到了非对称加密算法。在讲<code>SSH</code>加密原理前，我们先溯本追源，了解一下加密算法和其中经典的非对称加密算法<code>RSA</code>。</p>
<h4 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h4><p>计算机网络中的加密算法主要分为对称加密、非对称加密、散列算法等三种方式。</p>
<ul>
<li>对称加密：加密和解密使用同一个密钥，例如 <code>DES</code>、<code>AES</code>、<code>IDEA</code>、国密<code>SM1/SM4</code>等等。</li>
<li>非对称加密：发送方用公钥对信息进行加密，接收方收到密文后，使用私钥进行解密，例如<code>RSA</code>、<code>ECC</code>和国密<code>SM2</code></li>
<li>散列算法：哈希加密系列算法，特点是不可逆、唯一性，例如<code>MD5</code>、<code>SHA</code>、国密<code>SM3</code></li>
</ul>
<p>相比起对称加密，非对称加密的安全性更高，但加解密的效率也相对降低。</p>
<p>因此像<code>HTTPS</code>的<code>TLS1.2</code>握手协议就是采用了对称加密和非对称加密结合的方式进行密文数据传输。</p>
<h4 id="RSA-非对称加密算法"><a href="#RSA-非对称加密算法" class="headerlink" title="RSA 非对称加密算法"></a>RSA 非对称加密算法</h4><p><code>RSA</code>加密算法是经典的非对称加密算法，其基本流程如下：</p>
<ol>
<li>客户端在本地构建公钥和私钥，然后将公钥发送给服务器</li>
<li>服务器向客户端发送数据的时候用公钥进行加密，客户端收到数据后用私钥解密</li>
<li>客户端向服务器发送数据的时候用私钥进行加密，服务器收到数据后用公钥解密</li>
</ol>
<p>缺点在于：如果公钥在传输中泄漏，则黑客可以用公钥破解客户端发送的数据。</p>
<h4 id="SSH-加密原理"><a href="#SSH-加密原理" class="headerlink" title="SSH 加密原理"></a>SSH 加密原理</h4><p><code>SSH</code> 共有两种登录方式：</p>
<ul>
<li>口令验证登录<ol>
<li>服务器生成公钥和私钥</li>
<li>客户端发起连接请求，服务器将公钥发给客户端</li>
<li>客户端生成口令（服务器密码），并用服务器发来的公钥加密，发送给服务器</li>
<li>服务器通过私钥解密，拿到口令（服务器密码）</li>
<li>如果正确则认证成功</li>
</ol>
</li>
<li>密钥验证登录<ul>
<li>客户端生成公钥和私钥，将公钥提前部署在服务器上</li>
<li>客户端发起连接请求</li>
<li>服务器随机生成一个字符串，用本地的公钥加密，发送给客户端</li>
<li>客户端通过私钥解密，将解密后的字符串发送给服务器</li>
<li>服务器验证本地字符串和客户端发来的字符串的一致性，如果通过，则认证成功</li>
</ul>
</li>
</ul>
<h4 id="SSH-远程登录-github"><a href="#SSH-远程登录-github" class="headerlink" title="SSH 远程登录 github"></a>SSH 远程登录 github</h4><p>根据上节所述，第一步，我们首先要在客户端生成公钥和私钥。</p>
<p>随便找一个文件夹，右键菜单打开 <code>git bash</code>，键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7tAfG.png" alt="P7tAfG.png"></p>
<p>其中，密钥交换算法选择<code>rsa</code>。之后之后一路敲空格默认即可。</p>
<p>这时，我们可以在本地找到这两把密钥：私钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。路径如下：</p>
<ul>
<li><p><code>windows</code>：<code>C:/Users/admin/.ssh</code>（不同电脑型号的用户文件夹地址不同，区别就在于<code>admin</code>这个路径，我的是<code>admin</code>，你的可能是<code>ASUS、Lenovo、balabala</code>）</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tVRz.png" alt="P7tVRz.png"></p>
</li>
<li><p><code>mac/linux</code>：<code>~/.ssh</code></p>
</li>
</ul>
<p>第二步，我们要把公钥部署到<code>github</code>上。</p>
<p>在<code>bash</code>中键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>如下图所示，我们可以拿到公钥的内容，复制下来。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7t81u.png" alt="P7t81u.png"></p>
<p>接下来，进入我们的<code>github</code>，点击右上角的个人头像，再进入<code>settings</code>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tlCR.png" alt="P7tlCR.png"></p>
<p>之后先点击<code>SSH and GPG keys</code>，再点击<code>New SSH key</code>新建一个<code>SSH</code>公钥</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7teYt.png" alt="P7teYt.png"></p>
<p>如下图所示，将你复制好的公钥粘贴到 <code>balabala</code>的位置，输入自定义的公钥名，点击<code>Add SSH key</code>即可。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tXO4.png" alt="P7tXO4.png"></p>
<p>第三步，我们发起连接请求：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>

<p>其中<code>git@github.com</code>相当于<code>目标用户@目标主机</code>。</p>
<p>第一次连接通常会弹出来下面这句话：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (<span class="literal">yes</span><span class="regexp">/no/</span>[fingerprint])?</span><br></pre></td></tr></table></figure>

<p>我们键入<code>yes</code>即可，之后就会弹出下图，表示登录成功。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tUAX.png" alt="P7tUAX.png"></p>
<h4 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h4><ul>
<li>口令验证：其实是<strong>将口令进行非对称加密，通信双方都基于这个口令进行后续操作</strong>，比如<code>SSH</code>登录中，口令就是服务器密码；再者，传统的<code>TLS</code>握手（<code>TLS 1.2</code>之前）是基于<code>RSA</code>加密算法做密钥交换的，它的口令就是会话密钥。</li>
<li>密钥验证：它的<strong>前提条件是服务器需要有客户端的公钥</strong>，然后通过一次字符串的非对称加密实现<strong>免密码登录</strong>。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>github 常见按钮解读</title>
    <url>/a8ee13d15600.html</url>
    <content><![CDATA[<h4 id="说在前头"><a href="#说在前头" class="headerlink" title="说在前头"></a>说在前头</h4><p>我们在逛<code>Github</code>仓库的时候，总会见到下图所示的几个按钮：</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JxmL.png" alt="P7JxmL.png"></p>
<p>作者在这篇文章中分享一下这几个按钮的功能原理</p>
<h4 id="Pin"><a href="#Pin" class="headerlink" title="Pin"></a>Pin</h4><p>第一个按钮是<code>Pin</code>，该词可被译为：钉住、按住。被<code>Pin</code>的仓库会显示在个人主页中，类似于仓库置顶。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JOQU.png" alt="P7JOQU.png"></p>
<h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><p>第二个按钮是<code>Watch</code>，默认是<code>Unwatch</code>，如果你想关注某个仓库，当这个库有新的通知时就会提醒你。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JD9f.png" alt="P7JD9f.png"></p>
<p>我们可以选择通知的范围，类型一就是参与或者被@时接收通知，类型二代表这个库的所有变化都会通知，类型三表示忽略所有通知，类型四表示在参与和被@的基础上额外增加一些可以被通知的事件</p>
<h4 id="Star"><a href="#Star" class="headerlink" title="Star"></a>Star</h4><p>我们先说第四个按钮，这个代表点赞插眼，我们可以在自己的<code>Github</code>个人主页中找到<code>star</code>过的项目，且可以对这些仓库分类。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Ji8H.png" alt="P7Ji8H.png"></p>
<h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><p><code>OK</code>，回到第三个按钮，着重讲一下<code>Fork</code>的工作流。<code>Fork</code>代表从别人的代码仓库中复制一份到自己的代码库，包含了别人库中的提交历史记录。经过<code>fork</code>后的代码库是完全独立的，由自己维护，可以进行任何魔改。改完之后自己可以通过<code>Pull Request</code>向原来的库提交合并请求。先贴图总览：</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JTM2.png" alt="P7JTM2.png"></p>
<p>流程可以总结如下：</p>
<ol>
<li><code>Fork</code>别人的仓库：复制别人仓库（代码、文件、提交历史记录、<code>issue</code>等），复制后的仓库在自己的<code>github</code>账号中存着。</li>
<li><code>Clone</code>远程仓库：将这个复制后的远程仓库克隆到本地。</li>
<li>在工作区对代码进行<code>CRUD</code>操作（增删改查）</li>
<li>将代码的更改提交暂存区（<code>git add .</code>）</li>
<li>将暂存区的文件提交到本地仓库（<code>git commit -m &#39;小修一下&#39;</code>）</li>
<li>将本地仓库的代码推送到远程仓库（<code>git push</code>）</li>
<li>给别人的仓库发送<code>Pull Request</code>：如果原作者认为你的修改版本不错，就会将你代码中的修改合并到自己的库中。</li>
</ol>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>超详细的 github 账号申请与 git 安装教程</title>
    <url>/1b98fdf6a3bb.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文主要讲解<code>Github</code>的申请以及<code>Git</code>的下载安装，主要面向编程基础较差的同学</p>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a><code>Github</code></h4><ul>
<li><code>Github</code>是什么？</li>
</ul>
<p><a href="https://baike.baidu.com/item/Github/10145341?fr=aladdin">百度</a>这样描述：一个开源的软件项目托管平台，支持 <code>Git</code>作为唯一的版本库格式进行托管。贴吧这样描述：全球最大的程序员交友平台。</p>
<span id="more"></span>

<ul>
<li><p>如何申请<code>Github</code>账号</p>
<ol>
<li><p>进入<a href="https://github.com/"><code>Github</code>官网</a>，点击右上角<code>Sign up</code>进入注册页面</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tn8y.png" alt="P7tn8y.png"></p>
</li>
<li><p>输入邮箱、密码、用户名等信息进行注册</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7t5mr.png" alt="P7t5mr.png"></p>
</li>
<li><p>之后<code>Github</code>会向你的邮箱发送验证码，将邮件的激活码输入到注册界面即注册成功，跳转到正常的仓库界面</p>
<p>最好通过你的电脑端进入邮箱激活，手机邮箱激活可能出现页面激活失败的问题（梯子的问题）</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7t7T5.png" alt="P7t7T5.png"></p>
</li>
</ol>
</li>
</ul>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul>
<li><code>Git</code>是什么？</li>
</ul>
<p>一个开源的分布式版本控制系统。版本控制指的是字面上的意思吗，没错，就是控制你的版本。</p>
<p>举个例子：你用<code>word</code>给老板写个文档，你写了初稿，这是第一个版本，还做了个备份。过两天，你往初稿上添加了几行字，这就变成了第二版，版本这就样升级了。但是老板不想要第二版，于是你把第一版的备份给老板交上去了，这就是版本的回滚和提交。<code>Git</code>的基本工作流就是这样简单，应付个人开发足够了。</p>
<ul>
<li><p><code>Git</code>的安装</p>
<ol>
<li><p>进入<a href="https://git-scm.com/"><code>Git</code>官网</a>，点击下载</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tLR8.png" alt="P7tLR8.png"></p>
</li>
<li><p>选择对应的版本，作者演示的是<code>windows</code>系统</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tRBk.png" alt="P7tRBk.png"></p>
</li>
<li><p>现在一般都选择<code>64</code>位系统版本（小霸王电脑除外）</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tPui.png" alt="P7tPui.png"></p>
</li>
<li><p>下载完成后，打开<code>Setup</code>安装程序（<code>exe</code>后缀文件），除了以下界面外均一路点击<code>next</code>和<code>finish</code>即可成功安装。下面这个界面是自定义安装路径的，默认也行。但是为了方便你知道它安在哪，方便后续管理，强烈建议自己建一个文件夹，然后选择这个文件夹路径，也不费事</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tG3w.png" alt="P7tG3w.png"></p>
</li>
<li><p>验证一下，随便进入个文件夹，右键菜单会出现<code>Git bash here</code></p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JZSO.png" alt="P7JZSO.png"></p>
<p>进入后弹出命令框，键入<code>git --version</code>，即可弹出版本号，撒花··</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7tqOe.png" alt="P7tqOe.png"></p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>开发者必须要掌握的 YAML 知识点</title>
    <url>/085392f66d6f.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文主要讲解<code>yaml</code>语言的基本用法、特性、以及相关语法</p>
<h4 id="yaml是什么"><a href="#yaml是什么" class="headerlink" title="yaml是什么"></a><code>yaml</code>是什么</h4><p><code>yaml</code>是专门用来写配置文件的一种非标记语言，其文件通常以<code>.yml</code>后缀结尾</p>
<span id="more"></span>

<h4 id="yaml的特性"><a href="#yaml的特性" class="headerlink" title="yaml的特性"></a><code>yaml</code>的特性</h4><ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用 Tab 键，只允许使用空格</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
</ul>
<h4 id="如何注释"><a href="#如何注释" class="headerlink" title="如何注释"></a>如何注释</h4><p>开头加<code>#</code>，和<code>python</code>的单行注释方法一致</p>
<h4 id="yaml的数据结构"><a href="#yaml的数据结构" class="headerlink" title="yaml的数据结构"></a><code>yaml</code>的数据结构</h4><ul>
<li>对象（键值对）</li>
<li>数组</li>
<li>标量</li>
</ul>
<h4 id="yaml对象语法"><a href="#yaml对象语法" class="headerlink" title="yaml对象语法"></a><code>yaml</code>对象语法</h4><ul>
<li>写法一</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">张三</span></span><br></pre></td></tr></table></figure>

<ul>
<li>写法二（所有键值对写进一个对象）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span> &#123; <span class="attr">user:</span> <span class="string">张三</span>, <span class="attr">age:</span> <span class="number">24</span> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="yaml数组语法"><a href="#yaml数组语法" class="headerlink" title="yaml数组语法"></a><code>yaml</code>数组语法</h4><ul>
<li>写法一</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 张三</span><br><span class="line">- 24</span><br><span class="line">- 男</span><br></pre></td></tr></table></figure>

<ul>
<li>写法二</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span> [<span class="string">张三</span>, <span class="number">24</span>, <span class="string">男</span>]</span><br></pre></td></tr></table></figure>

<h4 id="yaml标量"><a href="#yaml标量" class="headerlink" title="yaml标量"></a><code>yaml</code>标量</h4><ul>
<li>整数</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">number:</span> <span class="number">23</span></span><br></pre></td></tr></table></figure>

<ul>
<li>浮点数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float: 23.5</span><br></pre></td></tr></table></figure>

<ul>
<li>布尔值</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flag:</span> <span class="literal">true</span> <span class="string">/</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Null</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">isRight:</span> <span class="string">`</span></span><br></pre></td></tr></table></figure>

<ul>
<li>时间（<code>ISO86o1</code>格式）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">time:</span> <span class="number">2022-12-14t21:59:43.10-05:00</span></span><br></pre></td></tr></table></figure>

<ul>
<li>日期</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date:</span> <span class="number">2022-03-27</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line"><span class="comment"># 字符串中有空格或特殊字符，则需要加引号。其中双引号不会转义特殊字符</span></span><br><span class="line"><span class="attr">motto:</span> <span class="string">&quot;走别人的路， 让别人无路可走&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="yaml引用"><a href="#yaml引用" class="headerlink" title="yaml引用"></a><code>yaml</code>引用</h4><p>锚点<code>&amp;</code>用来建立引用，<code>*</code>表示引用该锚点，<code>&lt;&lt;</code>表示合并到当前数据中</p>
<p>下面两个<code>demo</code>参考自 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">阮一峰老师的博客</a></p>
<p>首先看第一个<code>demo</code>，<code>defaults</code>是一个包含两个键值对的对象，它的键值对分别为<code>adapter: postgres</code>、<code>host: localhost</code>。<code>&amp;defaults</code>表示建立对象<code>defaults</code>的引用，引用名也叫<code>defaults</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure>

<p><code>development</code>和<code>test</code>很明显也是两个对象，在它们第二个键值对的位置分别添加了<code>&lt;&lt;: *defaults</code>，这表示将<code>defaults</code>引用的对象解构出来，赋值给当前键值对。因此，上述代码块等价于：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure>

<p>接下来看第二个<code>demo</code>，用到了数组以及引用的知识点。从整体来看，是一个数组。在第一个元素<code>Steve</code>位置添加了一个引用，引用名叫<code>showell</code>。第五个元素位置解构了该引用，因此，<code>Steve</code>合并到了第五个元素位置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&amp;showell</span> <span class="string">Steve</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Clark</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Brian</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Oren</span></span><br><span class="line"><span class="bullet">-</span> <span class="meta">*showell</span></span><br></pre></td></tr></table></figure>

<p>故上述代码块也就等价于</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Clark&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Oren&quot;</span>, <span class="string">&quot;Steve&quot;</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言</category>
        <category>配置语言</category>
      </categories>
      <tags>
        <tag>YAML</tag>
        <tag>WEB后端</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>一文看懂 react 架构</title>
    <url>/4c298c53de42.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文首先分析了<code>react 15</code>架构及其缺陷，进而引入<code>react 16</code>架构的原理介绍。</p>
<h4 id="调和"><a href="#调和" class="headerlink" title="调和"></a>调和</h4><p>在本文的开始首先弄清楚调和的概念：调和指的是通过<code>ReactDOM</code>等库使<code>VDOM</code>和<code>DOM</code>同步。也就是将<code>VOM</code>映射成<code>DOM</code>的过程。调和所做的工作包括组件的挂载、卸载、更新等过程，其中更新就用到了<code>Diff</code>算法。</p>
<h4 id="Diff-算法"><a href="#Diff-算法" class="headerlink" title="Diff 算法"></a>Diff 算法</h4><p><code>Diff</code>算法的本质是对比新旧<code>VDOM</code>树的变更差异。其核心思想分为三个方面：</p>
<ul>
<li><p>同层比较</p>
<ul>
<li>忽略跨层级操作，同层比较中如果发现节点不存在，则该节点及其子节点均会被删除。</li>
</ul>
</li>
<li><p>类型不同，原地替换；类型一致，分层递归</p>
<ul>
<li>当根节点是不同类型的元素时，会放弃比较，原地替换旧节点</li>
<li>当根节点是相同类型的<code>DOM</code>元素，保留根节点，只更新节点属性</li>
<li>当根节点是相同类型的组件，需要在组件<code>render</code>执行后，根据<code>render</code>返回的<code>VDOM</code>决定如何更新<code>DOM</code>。在比较完根节点后，会以同样的原则递归比较子节点。</li>
</ul>
</li>
<li><p>通过<code>key</code>重用节点</p>
<ul>
<li>在列表元素的比较中，如果定义了<code>key</code>，则<code>react</code>根据<code>key</code>匹配子节点，每次渲染后，只要子节点的<code>key</code>不变，则认为是同一个节点，进行复用，提高了更新效率。</li>
</ul>
</li>
</ul>
<h4 id="react-15-架构"><a href="#react-15-架构" class="headerlink" title="react 15 架构"></a>react 15 架构</h4><p>言归正传，<code>react</code>架构的组成可以分为两点：调和器和渲染器。在<code>V15</code>版本中的调和器称为栈调和器。</p>
<ul>
<li><code>stack reconciler</code>栈调和器<ul>
<li>调用函数组件或类组件的<code>render</code>方法，将返回的<code>jsx</code>转化为<code>VDOM</code>。</li>
<li>将<code>VDOM</code>和上次更新时的<code>VDOM</code>对比，找出本次更新中发生变化的<code>VDOM</code>。</li>
<li>通知<code>renderer</code>将变化的<code>VDOM</code>渲染到页面</li>
</ul>
</li>
<li><code>renderer</code>渲染器<ul>
<li><code>ReactDOM</code>：浏览器环境渲染</li>
<li><code>ReactNative</code>：<code>app</code>原生组件渲染</li>
<li><code>ReactTest</code>：渲染出纯<code>js</code>对象用于测试</li>
<li><code>ReactArt</code>：<code>canvas、svg</code>等容器上渲染</li>
</ul>
</li>
</ul>
<h4 id="react-15-架构的缺点"><a href="#react-15-架构的缺点" class="headerlink" title="react 15 架构的缺点"></a>react 15 架构的缺点</h4><p>主流浏览器每隔<code>16.7ms</code>就刷新一次，而浏览器渲染进程中<code>js</code>线程和<code>GUI</code>渲染线程是互斥的，不能同时执行，所以在每个<code>16.7ms</code>内既要执行<code>js</code>脚本，又要布局和绘制。<code>react 15</code>的更新属于同步更新策略，要递归遍历所有子节点进行<code>diff</code>、更新真实的<code>DOM</code>。并且这个过程是不能被打断的。当组件树的层级很深时，递归调和的时间超过了<code>16.7ms</code>，就会导致用户的交互出现卡顿。</p>
<h4 id="react-16-的解决思路"><a href="#react-16-的解决思路" class="headerlink" title="react 16 的解决思路"></a>react 16 的解决思路</h4><p>与<code>V15</code>版本不同的是，在<code>V16</code>版本中的调和器称为纤程调和器（<code>fiber reconciler</code>），并且新增了调度器调度任务的优先级，使得高优先级任务优先进入<code>fiber reconciler</code>。从整体来看，新架构的核心解决思路就是<strong>降低视图更新的优先级</strong>。</p>
<p><code>fiber reconciler</code>会把更新过程进行分片，调度器（<code>scheduler</code>）进行任务分配。当每个片段的任务执行完后就去看看有没有优先级更高的任务去做。如果有，就去把这个高优先级的任务做完，然后重新做更新任务。如果没有，才继续做其它的分片任务。</p>
<p>其中，任务的优先级分为六种：</p>
<ul>
<li><code>synchronous</code>，和<code>stack reconciler</code>一样都是同步执行</li>
<li><code>task</code>：在<code>next tick</code>前执行</li>
<li><code>animation</code>：下一帧前执行</li>
<li><code>high</code>：不久的将来立即执行</li>
<li><code>low</code>：稍微延迟执行</li>
<li><code>offscreen</code>：下一次<code>render</code>或<code>scroll</code>时执行</li>
</ul>
<p><code>fiber reconciler</code>在执行中分细分为两个阶段：</p>
<ul>
<li><code>render | reconciliation</code>阶段：生成<code>fiber</code>树，对新旧<code>VDOM</code>进行<code>diff</code>，找到需要更新的节点，放入更新队列。这个阶段进行分片处理，可以被高优先级的任务打断。值得注意的是，在类组件中，<code>componentWillMount、componentWillUpdate、componentWillReceiveProps、shouldComponentUpdata</code>这几个生命周期钩子可能会被多次调用，所以不要在以上钩子中做只需要做一次的操作，比方说<code>ajax</code>请求。</li>
<li><code>commit</code>阶段：将需要更新的节点一次性更新完，渲染真实<code>DOM</code>，不能被打断。</li>
</ul>
<h4 id="fiber-工作机制"><a href="#fiber-工作机制" class="headerlink" title="fiber 工作机制"></a>fiber 工作机制</h4><p><code>fiber reconciler</code>在<code>reconciliation</code>阶段会生成<code>fiber</code>树用于<code>diff</code>。<code>fiber</code>树和<code>react 15</code>架构中的<code>VDOM</code>树有什么区别？</p>
<p>我们先看看一个<code>fiber</code>节点长什么样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FiberNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tag</span> = tag; <span class="comment">// fiber 标签，代表的类型</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">key</span> = key; <span class="comment">// 用来调和子节点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="literal">null</span>; <span class="comment">// 对应的 dom 元素类型</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">stateNode</span> = <span class="literal">null</span>; <span class="comment">// 对应的 dom 元素</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">return</span> = <span class="literal">null</span>; <span class="comment">// 指向父级 fiber</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">child</span> = <span class="literal">null</span>; <span class="comment">// 指向子级 fiber</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sibling</span> = <span class="literal">null</span>; <span class="comment">//指向兄弟 fiber</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">index</span> = <span class="number">0</span>; <span class="comment">//索引</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ref</span> = <span class="literal">null</span>; <span class="comment">// 指向 ref 对象。</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pendingProps</span> = pendingProps; <span class="comment">// 在一次更新中，代表 element 创建</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">memoizedProps</span> = <span class="literal">null</span>; <span class="comment">// 记录上一次更新完毕后的 props</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">updateQueue</span> = <span class="literal">null</span>; <span class="comment">// 存放 setState 更新队列</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">memoizedState</span> = <span class="literal">null</span>; <span class="comment">// 类组件保存 state 信息，函数组件保存 hooks 信息</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dependencies</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mode</span> = mode; <span class="comment">// 描述 fiber 树的模式，比如 ConcurrentMode 模式</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">effectTag</span> = <span class="title class_">NoEffect</span>; <span class="comment">// effect 标签，用于收集 effectList</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nextEffect</span> = <span class="literal">null</span>; <span class="comment">// 指向下一个 effect</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstEffect</span> = <span class="literal">null</span>; <span class="comment">// 第一个 effect</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastEffect</span> = <span class="literal">null</span>; <span class="comment">// 最后一个 effect</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">expirationTime</span> = <span class="title class_">NoWork</span>; <span class="comment">// 通过不同过期时间，判断任务是否过期， 在 v17 版本用 lane 表示。</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">alternate</span> = <span class="literal">null</span>; <span class="comment">// 双缓存树，指向缓存的 fiber。更新阶段，两颗树互相交替。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一个<code>fiber</code>节点都和一个<code>react element</code>一一对应，<code>fiber</code>节点之间是通过<code>return、child、sibling</code>三个属性相连。</p>
<p>举个例子，同学们请看这个<code>App</code>组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class App extends React.Component&#123;</span><br><span class="line">   state=&#123; number:666 &#125;</span><br><span class="line">   render()&#123;</span><br><span class="line">     return &lt;div&gt;</span><br><span class="line">       hello world</span><br><span class="line">       &lt;p &gt; 东曜说 &#123; this.state.number &#125;&lt;/p&gt;</span><br><span class="line">       &lt;p&gt;关注走一走&lt;/p&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的<code>fiber</code>树就长这样</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JjPh.png" alt="P7JjPh.png"></p>
<p>既然明白了<code>fiber</code>节点的结构，以及<code>fiber</code>是如何联系的。那么接下来讲一下页面初始化时<code>fiber</code>的工作机制。</p>
<p>第一次挂载过程中，创建<code>fiberRoot</code>和<code>rootFiber</code>。</p>
<ul>
<li><code>fiberRoot</code>：首次构建应用时，会创建一个<code>fiberRoot</code>作为应用的<code>fiber</code>根节点</li>
<li><code>rootFiber</code>：组件的<code>fiber</code>根节点，可以通过<code>ReactDOM.render</code>渲染。</li>
</ul>
<p>创建<code>fiberRoot</code>时会将<code>fiberRoot</code>的<code>current</code>指针指向<code>rootFiber</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFiberRoot</span>(<span class="params">containerInfo, tag</span>) &#123;</span><br><span class="line">  <span class="comment">/* 创建一个root */</span></span><br><span class="line">  <span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">FiberRootNode</span>(containerInfo, tag);</span><br><span class="line">  <span class="keyword">const</span> rootFiber = <span class="title function_">createHostRootFiber</span>(tag);</span><br><span class="line">  root.<span class="property">current</span> = rootFiber;</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在渲染过程中，会复用当前<code>current</code>树的<code>alternate</code>作为<code>workInProgress</code>树。如果没有<code>alternate</code>（在第一次挂载时<code>current</code>树的<code>fiber</code>节点没有<code>alternate</code>），则会创建一个新<code>fiber</code>节点作为<code>workInProgress</code>树的<code>rootFiber</code>节点，同时两个颗树的<code>fiber</code>节点的<code>alternate</code>均指向彼此。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JK3Q.png" alt="P7JK3Q.png"></p>
<p>在<code>workInProgress</code>树上会完成整个<code>fiber</code>树的遍历，包括<code>fiber</code>节点创建。完成后，以<code>workInProgress</code>树作为新的渲染树，将<code>fiberRoot</code>的<code>current</code>指向<code>workInProgress</code>树的<code>rootFiber</code>，使其转化为<code>current</code>树。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JyuS.png" alt="P7JyuS.png"></p>
<p>如果我们将<code>App</code>组件修改一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class App extends React.Component&#123;</span><br><span class="line">   state=&#123; number:666 &#125;</span><br><span class="line">   handleClick=()=&gt;&#123;</span><br><span class="line">       this.setState(&#123;</span><br><span class="line">           number:this.state.number + 1</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   render()&#123;</span><br><span class="line">     return &lt;div&gt;</span><br><span class="line">       hello world</span><br><span class="line">       &lt;p &gt; 东曜说 &#123; this.state.number &#125;&lt;/p&gt;</span><br><span class="line">       &lt;button onClick=&#123;handleClick&#125;&gt;关注走一走&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时点击一次按钮，页面就会重新渲染一次。即重新创建一颗<code>workInProgress</code>树，复用当前<code>current</code>树上的<code>alternate</code>作为新的<code>workInProgress</code>。对于剩余子节点，<code>react</code>还需要创建一份，和<code>current</code>树上的<code>fiber</code>建立<code>alternate</code>关联。渲染完毕后，<code>workInProgress</code>再次转化为<code>current</code>树。</p>
<p>上述更新逻辑称为双缓冲树：<code>workInProgress</code>树在内存中构建，<code>current</code>树用作渲染视图，两棵树用<code>alternate</code>指针互相指向，在下一次渲染的时候直接复用缓存树作为一下次的渲染树，上一次的渲染树这次作为缓存树。这样可以防止只用一棵树更新时出现页面白屏闪烁的情况，又加快<code>DOM</code>节点的替换和更新。</p>
<h4 id="fiber-reconciler"><a href="#fiber-reconciler" class="headerlink" title="fiber reconciler"></a>fiber reconciler</h4><p>由上节可知，<code>fiber reconciler</code>可以分为两个阶段：<code>reconciliation</code>阶段和<code>commit</code>阶段。</p>
<p><code>reconciliation</code>阶段负责<code>fiber</code>树的调和，其执行过程分细分为<code>beginWork</code>和<code>completeWork</code>两个阶段。</p>
<ul>
<li><p><code>beginWork</code>是<code>workInProgress</code>树自顶向下<code>DFS</code>调和的阶段，由<code>fiberRoot</code>按照<code>child</code>指针逐层向下调和，期间执行组件<code>render</code>拿到<code>children</code>，然后遍历<code>children</code>，<code>diff</code>子节点，复用<code>oldFiber</code>，同时打上不同的副作用标签。</p>
</li>
<li><p><code>completeWork</code>是自底向上归并的过程，如果有兄弟节点返回<code>sibling</code>，没有就返回父级<code>fiber</code>，一直到<code>fiberRoot</code>。期间将打上副作用标签的<code>fiber</code>节点放进<code>effectList</code>单向链表中，在<code>commit</code>阶段不需要遍历每一个<code>fiber</code>，只需要执行更新<code>effectList</code>即可。在页面初始化情况下还会创建<code>DOM</code>，针对<code>DOM</code>元素进行事件收集，处理<code>style</code>等。</p>
</li>
</ul>
<p><code>commit</code>阶段可以细分为<code>beforeMutaion、mutation、layout</code>等三个阶段。</p>
<ul>
<li><code>beforeMutaion</code>具体指执行<code>DOM</code>操作前，如果是类组件则会执行<code>getSnapshotBeforeUpdate</code>生命周期钩子，如果是函数组件则会异步调用<code>useEffect</code>。</li>
<li><code>mutation</code>具体指执行<code>DOM</code>操作阶段，会进行真实<code>DOM</code>元素的增、删、改，同时置空<code>ref</code>。</li>
<li><code>layout</code>具体指执行<code>DOM</code>操作后，针对类组件会执行生命周期、<code>setState</code>的<code>callback</code>。针对函数组件会执行<code>useLayoutEffect</code>钩子，如果有<code>ref</code>则重新赋值。</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>fiber</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地进行团队协作开发</title>
    <url>/83dffeffb4ed.html</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近浏览到了 <a href="https://zhuanlan.zhihu.com/p/52370003">天猪</a>、<a href="https://zhuanlan.zhihu.com/p/25795393">偏右</a> 两位师兄的文章，讲的是<code>Github</code>中提交<code>issue</code>的过程中发现的问题以及相关思考，字字珠玑。让笔者回忆起了自己当时实习的经历，跟着带自己的师兄学习了很多，其中就包括如何高效地进行团队沟通。我将这两篇博客中的知识点进行提取，同时引用了部分例子，写下此文，分享一下如何优雅地进行团队协作。</p>
<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文主要讲解如何高效地进行团队协作，降低团队间的沟通成本</p>
<span id="more"></span>

<h4 id="把问题说清楚"><a href="#把问题说清楚" class="headerlink" title="把问题说清楚"></a>把问题说清楚</h4><p>在跑别人的代码或者使用开源的三方库报错时，如果自己无法解决这个<code>bug</code>，就需要向项目维护者沟通自己出现的问题，让他修复。</p>
<ol>
<li><p>指明遇到了什么<code>bug</code></p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">您好，在我的项目中引入了 xx.css，编译时报错了，错误信息如下：</span><br><span class="line"><span class="keyword">Module</span> build failed: SyntaxError: Unexpected token</span><br></pre></td></tr></table></figure>
</li>
<li><p>定位<code>bug</code>的范围</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">我是这么引用的：</span><br><span class="line">import <span class="string">&#x27;xxx.css&#x27;</span>;</span><br><span class="line"><span class="function"><span class="title">balalalala</span></span> .....</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="及时反馈"><a href="#及时反馈" class="headerlink" title="及时反馈"></a>及时反馈</h4><p>负责维护项目的同学如果看到了私信，但是你并没有提供充足的<code>bug</code>信息，那么他可能会进一步让你提供一个最小复现单元，所以你要及时关注消息，不要让维护的同学等太久。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">我的项目里出现了一个弹层<span class="keyword">bug</span></span><br><span class="line"><span class="keyword"></span>发现是 xx 组件和 yy 组件同时使用时出现的</span><br><span class="line">这里有个简单的重现例子-附件：component-xxx-yyy-<span class="keyword">bug.zip </span>(<span class="number">12</span>KB)</span><br></pre></td></tr></table></figure>

<h4 id="格式化-bug-代码"><a href="#格式化-bug-代码" class="headerlink" title="格式化 bug 代码"></a>格式化 bug 代码</h4><p>展示<code>bug</code>代码的时候，不要把代码格式弄乱了。两三行代码就能描述清楚的事儿，你整了八九行，比如这样：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;state = &#123;collapsed: <span class="literal">false</span>,&#125;;</span><br><span class="line">toggle = () =&gt; &#123;<span class="keyword">this</span>.setState(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      collapsed: !<span class="keyword">this</span>.state.collapsed,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">  &#125;render() &#123;<span class="keyword">return</span> &lt;<span class="type">Menu</span>&gt;...&lt;/<span class="type">Menu</span>&gt;;</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>自己看都费劲，更不要说维护的同学了。所以，不如花两分钟打开你的<code>IDE</code>，把代码格式化一下再粘出来</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    collapsed: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  toggle = () =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      collapsed: !<span class="keyword">this</span>.state.collapsed,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="type">Menu</span>&gt;...&lt;/<span class="type">Menu</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="控制好版本变量"><a href="#控制好版本变量" class="headerlink" title="控制好版本变量"></a>控制好版本变量</h4><p>控制变量的思想大家应该都知道，就是控制其它条件都相同，让某一要素发生变化进而对比结果。那么在团队协作中，如果你向项目维护的同学提了<code>bug</code>，他经过排查发现这个<code>bug</code>已经被修复了，于是你回过神儿发现你用的不是最新版本的代码，犯了一个低级错误。这就是信息不对称导致的无效沟通，那么为了避免出现这样的情况，我们在提出<code>bug</code>的时候，要指明自己的版本信息：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">您好，我的代码在 chrome<span class="number"> 35 </span>出错了，我用的代码版本是 v 1.0.5。</span><br><span class="line">维护者：好的，我也重现了，我看看怎么修复。</span><br></pre></td></tr></table></figure>

<h4 id="向另一团队的项目提交issue的正确姿势"><a href="#向另一团队的项目提交issue的正确姿势" class="headerlink" title="向另一团队的项目提交issue的正确姿势"></a>向另一团队的项目提交<code>issue</code>的正确姿势</h4><p>毕竟是帖子沟通，所以还是要走八股文之<code>issue</code>四段论：</p>
<ol>
<li>你做了什么？</li>
<li>你期待什么？</li>
<li>实际的情况是？</li>
<li>最小复现单元</li>
</ol>
<p>下面以浮层<code>bug</code>为例：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">xxx 组件浮层没有关闭</span><br><span class="line">- 使用版本：<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">- 浏览器：Chrome <span class="number">56.0987</span></span><br><span class="line">- 操作系统：Windows <span class="number">10</span></span><br><span class="line"></span><br><span class="line">## 你做了什么？</span><br><span class="line">我引入了组件 xxx，代码如下，我点击组件后打开浮层，做了如下操作。</span><br><span class="line"></span><br><span class="line">## 你期待什么？</span><br><span class="line">浮层应该关闭。</span><br><span class="line"></span><br><span class="line">## 实际的情况是？</span><br><span class="line">浮层短暂关闭后又再次弹出。</span><br><span class="line">（附带上一个小视频或是[GIF截图]）</span><br><span class="line"></span><br><span class="line">## 可重现的在线演示</span><br><span class="line">https:<span class="comment">//demo.com/demo.html</span></span><br></pre></td></tr></table></figure>

<h4 id="避免出现X-Y问题"><a href="#避免出现X-Y问题" class="headerlink" title="避免出现X-Y问题"></a>避免出现<code>X-Y</code>问题</h4><p><code>X-Y</code>问题是什么？</p>
<ul>
<li>有人想解决问题<code>X</code>，但他觉得<code>Y</code>可能是解决<code>X</code>的办法。</li>
<li>但是他不知道<code>Y</code>方案应该怎么做，于是他去问团队成员<code>Y</code>应该怎么搞。</li>
<li>在经过大量的讨论后，团队成员发现要解决的是<code>X</code>问题，但是<code>Y</code>压根不是解决<code>X</code>的合适方法，导致在一个错误的方向上耗费成本。</li>
</ul>
<p>所以，在解决<code>X</code>时，首先搞清楚解决问题的方向，不懂就问，之后再问怎么解决。</p>
<h4 id="反馈需求的优雅姿势"><a href="#反馈需求的优雅姿势" class="headerlink" title="反馈需求的优雅姿势"></a>反馈需求的优雅姿势</h4><p><code>Egg</code>团队在协作中通过<code>RFC</code>形式来讨论和实现一个新特性，该模式叫：基于<code>Github</code>的硬盘式异步协作模式，基本流程如下：</p>
<ol>
<li>通过<code>issue</code>发起<code>RFC</code>提案</li>
<li>讨论定稿</li>
<li>提交<code>Pull Request</code></li>
<li><code>Code Review</code></li>
<li><code>Publish</code></li>
</ol>
<p>其中<code>issue</code>模板如下：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">## 背景</span><br><span class="line">- 描述你希望解决的问题的现状</span><br><span class="line">- 附上相关的 issue 地址</span><br><span class="line"></span><br><span class="line">## 思路</span><br><span class="line">描述大概的解决思路，可以包含 API 设计和伪代码等</span><br><span class="line"></span><br><span class="line">## 跟进</span><br><span class="line">后续编辑，附上对应的 Pull Request 地址，可以用 `- [ ] some task` 的方式。</span><br></pre></td></tr></table></figure>

<p>同时规定：标题：<code>[RFC] your request title</code>，标签：<code>type: proposals</code></p>
<p>综上所述，该工作模式的优点在于方便技术沉淀，即使是当时没有参与讨论的开发者，事后也能通过<code>issue</code>了解某个功能设计的前因后果。</p>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>工程化</tag>
        <tag>大厂经验</tag>
      </tags>
  </entry>
  <entry>
    <title>安装和更新node的正确姿势</title>
    <url>/fd2d5489270f.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文主要讲解了如何安装<code>node</code>，以及如何更新<code>node</code>的版本&#96;。</p>
<h4 id="node-js-是什么"><a href="#node-js-是什么" class="headerlink" title="node.js 是什么"></a>node.js 是什么</h4><p>简称<code>node</code>，是基于<code>Chrome V8</code>引擎的<code>JavaScript(JS)</code>运行时环境</p>
<h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h4><p>进入<a href="http://nodejs.cn/download/">node 官网</a>，点击如下图所示的安装包即可下载，不同系统用户可根据自己的系统选择相应的安装包下载，作者用<code>windows</code>演示</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JuNw.png" alt="P7JuNw.png"></p>
<p>下载好后，我们自定义一个文件夹作为安装目录，例如作者的就是<code>E:\System_disk_app\Nodejs</code>。</p>
<p>双击下载好的<code>node-v16.14.2-x64.msi</code>文件，弹出安装向导，点击<code>next</code></p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JJLi.png" alt="P7JJLi.png"></p>
<p>如果没有遇到下图，看都不要看，点击<code>next</code>就行。</p>
<p>如果遇到了，就要停一停。这个界面就是要你选择安装路径，我们点击<code>change</code>，选择我们自定义的那个文件夹的路径，改好后看都不用看，一路点击<code>next</code>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Jb5O.png" alt="P7Jb5O.png"></p>
<p>碰到下面这个界面，说明安装完成，点击<code>finish</code></p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J128.png" alt="P7J128.png"></p>
<h4 id="检查一下安装效果"><a href="#检查一下安装效果" class="headerlink" title="检查一下安装效果"></a>检查一下安装效果</h4><p>按下快捷键<code>Win</code>+<code>R</code>打开命令行工具</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JcyU.png" alt="P7JcyU.png"></p>
<p>在<code>CMD</code>命令行中键入命令：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure>

<p>我们可以首先查看当前系统有没有装<code>node</code>，如果装了的话，会看到<code>node</code>当前的版本，作者当前版本为<code>v16.14.2</code>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Jtbk.png" alt="P7Jtbk.png"></p>
<p>键入以下命令，我们可以查看<code>node</code>的安装路径：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">where <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure>

<p>如果同学只是想安装 <code>node</code>，那么看到这里即可。</p>
<h4 id="node-更新版本"><a href="#node-更新版本" class="headerlink" title="node 更新版本"></a>node 更新版本</h4><p><code>windows</code>更新<code>node</code>版本，第一步就是把之前的版本卸载。如下图所示，我们搜索<code>控制面板</code>并点击进入。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JN4e.png" alt="P7JN4e.png"></p>
<p>点击<code>卸载程序</code></p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JSDy.png" alt="P7JSDy.png"></p>
<p>找到<code>node</code>，点击<code>卸载</code></p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JrVr.png" alt="P7JrVr.png"></p>
<p><code>OK</code>，这个方法可以很干净的卸载电脑中的软件，不只是<code>node</code>。</p>
<p>如果不放心的话，可以再打开你的<code>电脑管家</code>类似的工具，清理垃圾的时候额外清理一下<code>注册表</code>。</p>
<p>按照<code>node 安装</code>小节演示的方法，重新安装即可。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人主页保姆级教程（一）</title>
    <url>/19babb246b8a.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p><code>hexo</code>个人主页系列教程：本文主要介绍如何绑定<code>github</code>以及如何在本地搭建<code>hexo</code>个人主页项目。</p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>笔者在折腾网站时，发现许多教程都太老了（大多是<code>2017</code>、<code>18</code>年更新的），于是只能几篇博客对比着看，属实难受。</p>
<p>因此从本文开始（<code>2022.04</code>），将更新一个静态博客专题，专门来分享一下如何快速搭建个人主页，这里贴上我的个人主页：<a href="https://www.dongyaoo.com/">东曜说</a> ，同学们看一下效果。路过的同学可以关注收藏走一波，相见即是缘，后续将持续输出优质内容~~</p>
<h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p><code>hexo + github 托管 VS wordpress</code></p>
<ul>
<li><p>成本</p>
<p><code>wordpress</code>必须得搞云服务器或者虚拟主机，动辄一年<code>200</code>块起步的租钱，一般来说学生党肯定是顶不住的。<code>github</code>托管静态网站是免费的</p>
</li>
<li><p>维护</p>
<p><code>wordpress</code>建主页属于动态站点，当用户的访问量增多时服务器负载也会增大，访问速度明显下降，用来优化的维护成本高，搞得人脑壳痛。<code>hexo</code>建主页属于静态站点，通过敲几行<code>git</code>命令即可实现文章的发布，维护成本和操作难度低。</p>
</li>
<li><p>颜值</p>
<p><code>hexo</code>有丰富的主题可以选择，完全开源，而且颜值很高。博客嘛，得自己看的舒服才行，这也属于一个加分项。</p>
</li>
</ul>
<p>综上所述，本文将围绕<code>hexo + github</code>展开系列分享，不懂的同学可以多看几遍。世界上最远的距离就是<strong>知道</strong>和<strong>做到</strong>，动手才能发现乐趣。</p>
<h4 id="git-和-github"><a href="#git-和-github" class="headerlink" title="git 和 github"></a>git 和 github</h4><p>这一小节的标题是 <code>git</code>和<code>github</code>，那为什么第一步要准备<code>git</code>和<code>github</code>呢？</p>
<p>因为我们可以通过<code>git</code>向<code>github</code>传输文件，这时，<code>github</code>是托管你的网站的服务器，<code>git</code>是你连接服务器的工具。不懂<code>github</code>和<code>git</code>的同学移步：<a href="https://www.dongyaoo.com/1b98fdf6a3bb.html">超详细的 github 账号申请与 git 安装教程</a>。</p>
<p>好了，现在我们有<code>git</code>和<code>github</code>账号了，那<code>git</code>和<code>github</code>是如何连接的呢？</p>
<p>答案是：借助<code>SSH</code>协议。<code>SSH</code>全称<code>Secure Shell</code>，即安全外壳协议。它通过数据加密和认证机制实现了设备互联的安全保障，相较于<code>FTP、SFTP</code>等明文传输的协议有更高的安全性能。</p>
<p><code>SSH</code>的加密机制是非对称加密，这也就是说它会在本地生成两把钥匙：一把是公钥，我们把它传到<code>github</code>上。一把是私钥，留在我们自己的电脑上。<code>git</code>安装后会默认附带安装<code>SSH</code>，所以我们可以省去安装<code>SSH</code>的环节。</p>
<h4 id="绑定-git-和-github"><a href="#绑定-git-和-github" class="headerlink" title="绑定 git 和 github"></a>绑定 git 和 github</h4><p>如上所述，<code>ssh</code>已经就绪。我们随便找个文件夹，右键打开<code>git bash here</code>，键入命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>

<p>该命令的作用就是用来生成这两把钥匙，加密算法采用<code>rsa</code>，之后一路敲空格默认即可。</p>
<p>这时，我们可以在本地找到这两把密钥：私钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。</p>
<p><code>OK</code>，接下来就是把公钥部署在<code>github</code>上，然后用<code>SSH</code>密钥登录的方法进行连接（免密码登录）。因为篇幅有限，不懂如何部署公钥以及想要了解<code>SSH</code>如何连接<code>github</code>的同学移步：<a href="https://www.dongyaoo.com/6d82e825daef.html">SSH 登录及其原理详解</a>。</p>
<h4 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h4><p>到了现在这一步，我们已经成功绑定自己电脑的<code>git</code>和你的<code>github</code>账号了。</p>
<p><code>github</code>仓库就是托管你的个人主页的容器，所以，我们首先要把这个容器搭好。</p>
<p>打开你的 <code>github</code> 主页，点击头像，点击<code>Your repositories</code>进入仓库界面。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HuG4.png" alt="P7HuG4.png"></p>
<p>点击<code>New</code>，我们新建一个仓库，输入仓库名即可点击 <code>Create repository</code>（忽略我的提示，因为我已经有同名库了）</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HHvD.png" alt="P7HHvD.png"></p>
<p>就是这么简单，装你个人网站的容器就搭好了。</p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>本节需要用到<code>npm</code>，它是<code>node</code>的包管理工具，因此我们首先得准备好<code>node</code>环境，不知道如何安装<code>node</code>的同学移步：<a href="https://www.dongyaoo.com/fd2d5489270f.html">安装和更新 node 的正确姿势</a>。</p>
<p>我们首先在本地建一个文件夹，命名为 <code>blog</code>。值得注意的是，这个文件夹就是你的个人网站的项目文件夹，所以一定要自定义好路径。</p>
<p>进入该文件夹，右键<code>Git hash here</code> ，键入命令安装<code>Hexo</code>脚手架：</p>
<p>已经安装过<code>VSCode</code>的同学，可以用它打开这个文件夹，在终端中键入命令即可（安装<code>cnpm</code>的同学可以用<code>cnpm</code>替换<code>npm</code>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，键入命令初始化一个<code>hexo</code>项目</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7H1cX.png" alt="P7H1cX.png"></p>
<p>然后输键入命令生成静态网页，在项目根目录中会生成一个<code>public</code>文件夹，这个<code>public</code>就是你要托管的个人网站</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g / hexo generate</span><br></pre></td></tr></table></figure>

<p><code>hexo g</code> 是 <code>hexo generate</code> 的缩写，两个命令都有效。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HJip.png" alt="P7HJip.png"></p>
<p>最后，我们在本地测试一下网站，键入以下命令开启本地<code>node</code>服务器</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">hexo s / hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HUzG.png" alt="P7HUzG.png"></p>
<p>如下图所示，可以看到我们的初始站点已经<code>run</code>起来了，使用的是默认主题，有点丑，不过万事开头难，恭喜你有了自己的网站，后续我会再更新如何更改主题，看完就可以在终端中<code>ctrl c</code>关了它。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HNl6.png" alt="P7HNl6.png"></p>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人主页保姆级教程（三）</title>
    <url>/49d4f7cf52bf.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p><code>hexo</code>个人主页系列教程：本文主要讲解<code>next</code>主题的文章的相关优化工作。</p>
<h4 id="增加标签和分类页面"><a href="#增加标签和分类页面" class="headerlink" title="增加标签和分类页面"></a>增加标签和分类页面</h4><p>我们按照路径<code>themes/next/_config.yml</code>打开主题配置文件，找到<code>menu</code>字段，更改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure>

<p><code>tags</code>为标签页界面，以标签为分类基准展示整个站点的文章；<code>categories</code>为归类页界面，以类别为分类基准展示文章。</p>
<p>例如<code>tags: /tags/ || fa fa-tags</code>中，<code>/tags/</code>为页面的前端路由。<code>fa</code>为图标的标签属性，用于统一化样式。<code>fa-tags</code>为图标的名称，<code>next</code>主题默认使用的图标库是 <a href="http://www.fontawesome.com.cn/faicons/#web-application">Font Awesome</a>，如果想更换图标，只需要到该网站记下对应图标的名称，然后在配置文件中替换即可。</p>
<p><code>OK</code>，设置好后进入终端，键入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>此时，我们已经新建了两个页面，在<code>themes/sources</code>文件夹下可以看到这两个同名文件夹，每个文件夹下都有一个<code>index.md</code>文件。我们分别打开，进行修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tags/index.md</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我是选择标签的页面</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-04-14 10:58:17</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span> <span class="comment"># 设置页面类型</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># categories/index.md</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我是选择类别的页面</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-04-14 12:13:13</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="给文章添加标签和分类"><a href="#给文章添加标签和分类" class="headerlink" title="给文章添加标签和分类"></a>给文章添加标签和分类</h4><p>上节说到，我们已经增加了标签和分类两个页面，接下来，我们就要给文章添加标签和分类。</p>
<p>打开一篇文章，我们可以看到开头已经有<code>yaml</code>语法的框架了，不知道或者想回顾<code>yaml</code>语法的话移步：<a href="https://www.dongyaoo.com/085392f66d6f.html">开发者必须要掌握的 YAML 知识点</a>。将其修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">张三的自我救赎</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-04-24 10:25:34</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">随笔</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">张三</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">笔记</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">张三</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">救赎</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;这是张三的自我救赎。&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><code>title</code>是文章的标题；<code>date</code>是文章的创建时间；<code>categories</code>是一个数组，<code>[随笔]</code>表示该文章的类别是<code>随笔</code>，<code>[随笔, 子随笔]</code>表示该文章的类别是<code>随笔</code>下的子类别<code>子随笔</code>；<code>tags</code>数组中是要添加的标签；<code>keywords</code>数组中是文章关键词；<code>description</code>是文章的描述，在主页中会显示成摘要。接着走一波<code>hexo clean; hexo g; hexo s</code>就可以在<code>tags</code>和<code>categories</code>页面找到这篇文章啦。</p>
<h4 id="调整文章间距和阴影效果"><a href="#调整文章间距和阴影效果" class="headerlink" title="调整文章间距和阴影效果"></a>调整文章间距和阴影效果</h4><p>进入<code>themes/next/source/css/_common/post/post.styl</code>路径，找到<code>.use-motion</code>选择器，在<code>if(hexo-config(&#39;motion.transition.post_block&#39;))</code>后面进行修改，添加上<code>.post-block</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.use-motion</span> &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion<span class="selector-class">.transition</span><span class="selector-class">.post_block</span>&#x27;)) &#123;</span><br><span class="line">    <span class="selector-class">.post-block</span>, <span class="selector-class">.pagination</span>, <span class="selector-class">.comments</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.post-block</span> &#123;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">      <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改文章底部标签样式"><a href="#修改文章底部标签样式" class="headerlink" title="修改文章底部标签样式"></a>修改文章底部标签样式</h4><p>进入路径<code>themes/next/_config.yml</code>，修改主题配置文件的<code>tag_icon</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这将用图标，替换标签的<code>#</code>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Hpc2.png" alt="P7Hpc2.png"></p>
<h4 id="修改文章超链接样式"><a href="#修改文章超链接样式" class="headerlink" title="修改文章超链接样式"></a>修改文章超链接样式</h4><p>进入路径<code>themes/next/source/css/_common/components/post/post.styl</code>，找到<code>.post-body p a</code>选择器，将其替换为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#330099</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#330099</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff8c00</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ff8c00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HmIW.png" alt="P7HmIW.png"></p>
<h4 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h4><p>进入路径<code>themes/next/_config.yml</code>，修改主题配置文件的<code>codeblock</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>

<p><code>codeblock</code>字段会更改代码块的主题样式，感兴趣的同学不妨都尝试一下，找到自己喜欢的风格。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HEJh.png" alt="P7HEJh.png"></p>
<h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>进入路径<code>themes/next/_config.yml</code>，修改主题配置文件的<code>custom_file_path</code>字段，将<code>style</code>的注释取消：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line">custom_file_path:</span><br><span class="line">  style: source<span class="regexp">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure>

<p>在<code>blog/source</code>下新建一个<code>_data</code>文件夹，文件夹中新建一个<code>styles.styl</code>文件（不用<code>VScode</code>的同学，可以新建一个<code>styles.txt</code>，再更改它的后缀）。在上面编辑以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>,</span><br><span class="line">pre &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line">pre &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HFzS.png" alt="P7HFzS.png"></p>
<h4 id="图片居中预览"><a href="#图片居中预览" class="headerlink" title="图片居中预览"></a>图片居中预览</h4><p>进入路径<code>themes/next/_config.yml</code>，修改主题配置文件的<code>mediumzoom</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mediumzoom:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>fancybox</code>和<code>mediumzoom</code>是冲突的，所以保存<code>fancybox: false</code>就好。</p>
<h4 id="启用文章目录"><a href="#启用文章目录" class="headerlink" title="启用文章目录"></a>启用文章目录</h4><p>进入路径<code>themes/next/_config.yml</code>，修改主题配置文件的<code>toc</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HsnQ.png" alt="P7HsnQ.png"></p>
<h4 id="添加本文结束标记"><a href="#添加本文结束标记" class="headerlink" title="添加本文结束标记"></a>添加本文结束标记</h4><p>进入路径<code>themes/next/layout/_macro</code>，新建一个名为<code>passage-end-tag.swig</code>的文件，键入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span></span><br><span class="line">    ~~~~~~~~~~~~~~ 本文结束 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 感谢您的阅读</span><br><span class="line">    ~~~~~~~~~~~~~~</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后进入路径<code>themes/next/layout/_macro/post.swig</code>，找到&#96;</p>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人主页保姆级教程（二）</title>
    <url>/8f01361f36d0.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p><code>hexo</code>个人主页系列教程：本文主要介绍如何设置主题，以及如何编写、上传文章。</p>
<h4 id="next-主题"><a href="#next-主题" class="headerlink" title="next 主题"></a>next 主题</h4><p>现在，我们要挑选一款漂亮的主题，笔者推荐先使用<code>next</code>主题。一方面是<code>next</code>集成黑白简约的风格，有助于读者专注于文章的阅读；另一方面就是<code>next</code>社区活跃人数多，现在的<code>8.0</code>版本的主题集成了许多第三方插件的接口，可以方便地进行用户交互、页面美化、站点统计、百度推送等等功能，动态站点有的，它都涵盖得差不多了。</p>
<p>打开个人主页项目的根目录，打开<code>git bash</code>窗口，键入以下代码将<code>next</code>下载到本地的<code>blog/themes</code>路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HYhE.png" alt="P7HYhE.png"></p>
<p>打开根目录下的<code>_config.yml</code>修改主题，该文件为站点配置文件。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> 张三的快乐生活</span><br><span class="line"><span class="symbol">subtitle:</span></span><br><span class="line"><span class="symbol">author:</span> 张三</span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br><span class="line"><span class="symbol">timezone:</span> Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="meta">#把主题改为 next</span></span><br><span class="line"><span class="symbol">theme:</span> next</span><br></pre></td></tr></table></figure>

<p>值得注意的是，<code>next</code>主题又分了<code>4</code>种子主题，分别为<code>Muse、Mist、Gemini、Pisces</code>。如何设置呢？</p>
<p>进入路径<code>blog/themes/next</code>，找到<code>_config.yml</code>，这里的<code>_config.yml</code>是主题配置文件。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line"><span class="symbol">scheme:</span> Gemini</span><br></pre></td></tr></table></figure>

<p>作者选的是<code>Gemini</code>，同学们想选哪个就把哪个的注释去掉，可以都试试看看效果，挑一个喜欢的。</p>
<p>设置完成后，在根目录<code>blog</code>下打开<code>git bash</code>，依次键入：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>

<p>便可以在本地启动个人网页服务，在浏览器中输入网址：<code>localhost:4000</code>，检验一下你的主题。</p>
<h4 id="我的第一篇文章"><a href="#我的第一篇文章" class="headerlink" title="我的第一篇文章"></a>我的第一篇文章</h4><p>我们的硬件设施都准备完毕啦，但是网页上显示的只有<code>hello world</code>这篇文章，该怎么写文章呢？</p>
<p>我们进入<code>blog/source/_posts</code>文件夹，可以看到<code>hello world.md</code>这个项目的初始文章。这个路径就是你的所有文章的保存位置。</p>
<p>目前有两种方式写文章</p>
<ul>
<li><p>第一种：我们可以用其它<code>markdown</code>编辑工具（例如<code>Typora</code>）提前编辑好，然后将写好的文章拖到<code>_posts</code>中。然后在根目录打开<code>git bash</code>，键入<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>（或者用<code>VScode</code>打开<code>blog</code>文件夹，在终端中键入<code>hexo clean; hexo g; hexo s</code>，推荐使用<code>VScode</code>维护你的网站，以后我们都以该<code>IDE</code>为标准进行讲解），即可同步到本地网站。</p>
</li>
<li><p>第二种：</p>
<ol>
<li><p>我们提前进入<code>blog/scaffolds</code>文件夹，打开<code>post.md</code>，将其替换为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123; &#123; <span class="string">title</span> &#125; &#125;</span><br><span class="line"><span class="attr">date:</span> &#123; &#123; <span class="string">date</span> &#125; &#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>这个<code>post.md</code>就是你的文章的母版，你想做什么统一的配置，都可以在母版编辑。</p>
</li>
<li><p>在终端中键入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&#x27;我的第一篇文章&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这条命令就是用来初始化一篇文章的，其中的<code>post</code>可写可不写。这样你就可以在<code>_post</code>文件夹中找到<code>我的第一篇文章.md</code>了。写完后，用第一种方法说过的<code>hexo clean ...</code>命令重新生成本地文件，打开<code>localhost:4000</code>，你就可以看到自己的文章啦。</p>
</li>
</ol>
</li>
</ul>
<h4 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h4><p><code>OK</code>，现在我们要把本地生成的项目文件统统部署到远程仓库上面去，这样其它人就能访问你的个人主页啦。</p>
<p>首先，我们键入以下命令安装部署插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安装完成后，我们进入<code>blog/_config.yml</code>站点配置文件，修改<code>deploy</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="string">//</span> <span class="string">repository</span> <span class="string">替换为你自己的仓库名</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:dongyaoo/dongyaoo.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>还记得你的<code>github</code>仓库名吗，不记得的同学移步：<a href="https://www.dongyaoo.com/19babb246b8a.html">搭建个人主页保姆级教程（一）</a>。按照上篇教程的方法找到你绑定的仓库名，</p>
<p>配置好后在<code>VSCode</code>终端输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>即可一键部署到 <code>github</code>。那如果有的新手同学在该步骤报错，应该是没设置 <code>git config --global user.email | user.name</code> ）。在终端中键入以下命令，重新<code>hexo d</code>一下就行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;gitHub邮箱&quot;</span><br><span class="line">git config --global user.name &quot;gitHub用户名&quot;</span><br></pre></td></tr></table></figure>

<p>稍等片刻，在浏览器输入<code>www.dongyaoo.github.io</code>即可访问到你的个人网页啦（记得把<code>dongyaoo</code>替换为你的仓库名）。</p>
<p>这时，你的网站已经上线啦，在别的设备上输入这个网站也能看到你的专属网站~~</p>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人主页保姆级教程（五）</title>
    <url>/c860aae28d5c.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p><code>hexo</code>个人主页系列教程：本文主要讲解<code>next</code>主题相关插件的配置。</p>
<h4 id="Pjax-优化"><a href="#Pjax-优化" class="headerlink" title="Pjax 优化"></a>Pjax 优化</h4><p><code>pjax</code>是一款基于<code>jQuery</code>的插件，基于<code>pushState</code>和<code>ajax</code>，实现站点的局部刷新。它将站点转化为<code>SPA</code>应用，可以提升页面切换速度。同时它可以解决<code>aplayer</code>插件切换页面后重新播放的问题。</p>
<p>我们在终端依次键入以下命令（前提是终端路径为<code>blog</code>，即项目根目录）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br><span class="line">cd ../..</span><br></pre></td></tr></table></figure>

<p>进入路径<code>themes/next/_config.yml</code>，修改<code>pjax</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h4><p>标签云插件<code>hexo-tag-cloud</code>实现了较为炫酷的标签环绕效果，可以自定义标签云的字体、颜色、高亮显示。</p>
<p>我们在终端键入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure>

<p>进入路径<code>themes/next/layout/_macro/sidebar.swig</code>，然后找到<code>&lt;div class=&quot;site-overview-wrap sidebar-panel&quot;&gt;</code>，在该标签的后面添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcloud.js&#x27;) &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas.js&#x27;) &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;widget-title&quot;</span>&gt;</span>标签云<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>具体位置如图所示：</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HM0u.png" alt="P7HM0u.png"></p>
<p>之后，进入项目根目录<code>blog</code>，打开站点配置文件<code>_config.yml</code>，找个空地添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标签云</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">  <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span> <span class="comment"># 字体</span></span><br><span class="line">  <span class="attr">textColor:</span> <span class="string">&quot;#333&quot;</span> <span class="comment"># 字体颜色</span></span><br><span class="line">  <span class="attr">textHeight:</span> <span class="number">20</span> <span class="comment"># 字体大小</span></span><br><span class="line">  <span class="attr">outlineColor:</span> <span class="string">&quot;#E2E1D1&quot;</span></span><br><span class="line">  <span class="attr">maxSpeed:</span> <span class="number">0.2</span> <span class="comment"># 旋转速度</span></span><br><span class="line">  <span class="attr">pauseOnSelected:</span> <span class="literal">true</span> <span class="comment"># 当选中对应标签时，是否停止转动</span></span><br></pre></td></tr></table></figure>

<p><code>OK</code>，之后终端键入以下命令，在本地观察效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean; hexo g; hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HZLG.png" alt="P7HZLG.png"></p>
<h4 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h4><p>本地搜索插件<code>hexo-generator-searchdb</code>可以实现弹框式站内搜素功能。</p>
<p>在终端键入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>进入项目根目录，修改站点配置文件<code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure>

<p>接着进入<code>themes/next/_config.yml</code>，修改<code>local_search</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7Hx5R.png" alt="P7Hx5R.png"></p>
<h4 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h4><p>站点地图放置了搜索引擎抓取的所有页面的链接，可以告诉搜索引擎网站有哪些网页能抓。帮助网站页面被诸如百度、谷歌等搜索引擎网站收录，提升个人网站的曝光度。</p>
<p>首先安装百度和谷歌站点地图插件<code>hexo-generator-baidu-sitemap、hexo-generator-sitemap</code>，可以在<code>public</code>目录下自动生成<code>baidusitemap.xml、sitemap.xml</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-baidu-sitemap --save</span><br><span class="line">cnpm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>进入项目根目录，修改站点配置文件<code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<h4 id="来点音乐"><a href="#来点音乐" class="headerlink" title="来点音乐"></a>来点音乐</h4><p><code>aplayer</code>是一款网页音乐播放器，我们首先去<code>aplayer</code><a href="https://github.com/MoePlayer/APlayer">仓库地址</a>下载源码。</p>
<p>再将仓库中的<code>dist</code>文件夹复制到<code>blog/themes/next/source</code>。</p>
<p>在目录<code>blog/themes/next/source/dist</code>下新建<code>music.js</code>文件，添加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;aplayer&quot;</span>),</span><br><span class="line">  <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">autoplay</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">theme</span>: <span class="string">&quot;#000&quot;</span>,</span><br><span class="line">  <span class="attr">mutex</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lrcType</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">audio</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;哪里都是你&quot;</span>,</span><br><span class="line">      <span class="attr">artist</span>: <span class="string">&quot;队长&quot;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;http://music.163.com/song/media/outer/url?id=488249475.mp3&quot;</span>,</span><br><span class="line">      <span class="attr">cover</span>:</span><br><span class="line">        <span class="string">&quot;http://p1.music.126.net/Ieq9StJjPVyRPlmeOanldQ==/109951166470091750.jpg?param=180y180&quot;</span>,</span><br><span class="line">      <span class="attr">lrc</span>: <span class="string">&quot;[00:00.000] 作词 : 队长\n[00:01.000] 作曲 : 队长/박수석/김문철&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其中，<code>lrcType: 1</code>为歌词格式，表示以<code>lrc</code>字符串的方式添加歌词。音频信息中，<code>name</code>为歌曲名，<code>url</code>为歌曲地址，<code>cover</code>为封面图片地址，<code>lrc</code>为歌词字符串。不懂如何设置<code>lrc</code>字符串的参考：<a href="https://www.dongyaoo.com/f8465742ea8f.html">讲讲如何优雅地扒歌词</a>。</p>
<p><code>url</code>怎么获得？以云村为例，播放一首歌，将页面网址的<code>id</code>复制下来：</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JGU4.png" alt="P7JGU4.png"></p>
<p>然后在<code>http://music.163.com/song/media/outer/url?</code>的后面加入刚复制的<code>id</code>字符串。</p>
<p>最后，我们进入路径<code>themes/next/layout/_layout.swig</code>，将下面的代码添加到<code>&lt;body&gt;</code>标签中，地方随意。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- aplayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>head</code>标签中添加以下代码设置播放器的样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/dist/APlayer.min.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HDtz.png" alt="P7HDtz.png"></p>
<h4 id="本地字体"><a href="#本地字体" class="headerlink" title="本地字体"></a>本地字体</h4><p><code>next</code>主题默认使用<code>google fonts API</code>来设置字体，由于<code>google fonts API</code> 属于国外服务器提供服务支持，因此稳定性差。我们可以将字体下载到本地中，替换字体服务。</p>
<p>比如我们下载了<code>.ttf</code>后缀的字体文件。进入路径<code>themes/next/source</code>，新建文件夹<code>fonts</code>，然后将字体文件安置其中。</p>
<p>接着，进入路径<code>blog/source/_data/styles.styl</code>，添加以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 本地字体</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;alipuhui&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../fonts/alipuhui.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;consola&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../fonts/consola.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作者下载了阿里普惠作为全局字体，<code>consola</code>为代码字体。</p>
<p>然后，进入路径<code>themes/next/_config.yml</code>，修改<code>font</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">alipuhui</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">consola</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人主页保姆级教程（六）</title>
    <url>/da38847430cf.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p><code>hexo</code>个人主页系列教程：本文主要讲解如何购买域名、配置<code>DNS</code>解析以及域名上线。</p>
<h4 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h4><p>域名注册的途径有很多，国内知名的注册点有阿里云、腾讯云等云服务提供商，新用户注册还可以享受打折优惠。</p>
<p>我们以<a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a>为例，注册登录后，在首页找到域名注册产品</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JqF6.png" alt="P7JqF6.png"></p>
<p>进入域名注册页面后，输入自己想要注册的域名，查看是否已经被注册。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JWjT.png" alt="P7JWjT.png"></p>
<p>我们拿<code>zhangsan.link</code>为例，点击添加，该域名会加入到选购清单。然后再点击立即购买。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JLxD.png" alt="P7JLxD.png"></p>
<p>跳转到结算页面后，会提醒创建信息模板。这个表单的目的就是让你实名注册。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JIoX.png" alt="P7JIoX.png"></p>
<p>进入创建信息模板的页面后，输入相关信息，完毕后确认提交。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JR6p.png" alt="P7JR6p.png"></p>
<p>提交后喝杯水静待几分钟，就会审核通过，最后提交订单结算即可生效。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J55E.png" alt="P7J55E.png"></p>
<h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p>回到腾讯云主页，我们点击进入控制台，搜索进入<code>DNSPod</code>来配置域名的<code>DNS</code>解析。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J7NQ.png" alt="P7J7NQ.png"></p>
<p>在你已经购买的域名处，点击解析。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JQ0h.png" alt="P7JQ0h.png"></p>
<p>然后点击添加记录</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JeLS.png" alt="P7JeLS.png"></p>
<p>这里我们需要添加两条解析记录，一条为<code>A</code>类型记录，一条为<code>CNAME</code>类型记录。</p>
<ul>
<li><code>A</code>类型记录将我们的域名解析到托管主机的<code>IP</code>地址</li>
<li><code>CNAME</code>类型记录可以将域名<code>A</code>解析到域名<code>B</code>。</li>
</ul>
<p>如何添加<code>A</code>类型记录呢？我们打开<code>CMD</code>命令行，键入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping xxx.github.io</span><br></pre></td></tr></table></figure>

<p><code>xxx.github.io</code>就是你的<code>github</code>仓库地址。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JlbW.png" alt="P7JlbW.png"></p>
<p><code>OK</code>，拿到<code>ip地址</code>了，手动添加<code>A</code>类型记录即可。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J6o2.png" alt="P7J6o2.png"></p>
<p>接下来要添加<code>CNAME</code>类型记录，该记录的作用是在访问<code>www.zhangsan.link</code>的时候，能将其解析到<code>zhangsan.link</code>。换句话来说，不需要输入<code>www</code>即可访问你的网站<code>zhangsan.link</code>，就算带上<code>www</code>，最后也会解析到你的网站。</p>
<p>但是添加该记录的前提是你的网站项目中得准备一个<code>CNAME</code>文件。详细来讲，我们可以创建一个<code>CNAME.txt</code>，在其中输入你的域名<code>zhangsan.link</code>，保存后重命名去掉<code>.txt</code>后缀。然后把<code>CNAME</code>文件放到项目根路径<code>blog</code>的<code>source</code>文件夹中，接着<code>hexo clean; hexo g</code>重新生成，即可将<code>CNAME</code>自动添加到项目的<code>public</code>文件夹中。</p>
<p>准备好<code>CNAME</code>文件后，在<code>DNS</code>解析中手动添加<code>CNAME</code>记录。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JVDH.png" alt="P7JVDH.png"></p>
<p>至此，域名解析完毕。</p>
<h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><p>域名解析记录添加好后，我们首先进入项目路径<code>blog/_config.yml</code>，在站点配置文件中找到<code>url</code>字段，将其更改为你配好的域名：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://www.zhangsan.link</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:hash.html</span></span><br></pre></td></tr></table></figure>

<p>接着进入网站的<code>github</code>仓库中，确保你的<code>Custom domain</code>更改为自己购买的域名，然后将<code>Enforce HTTPS</code>打勾，这样你的域名就支持<code>HTTPS</code>协议。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JAVL.png" alt="P7JAVL.png"></p>
<p>在项目中重新<code>hexo clean; hexo g; hexo d</code>，静待片刻，网站即可通过域名访问。</p>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人主页保姆级教程（四）</title>
    <url>/ca04ea65c46c.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p><code>hexo</code>个人主页系列教程：本文主要讲解<code>next</code>主题站点以及个人信息的优化。</p>
<h4 id="设置建站时间"><a href="#设置建站时间" class="headerlink" title="设置建站时间"></a>设置建站时间</h4><p><code>OK</code>，书接<a href="https://dongyaoo.com/49d4f7cf52bf.html">上文</a>，我们将博文的相关配置都搞定了。接下来就要好好地美化一下自己的网站~</p>
<p>第一件事就是设置一下自己的建站时间，记录个人主页这一里程碑的时刻。我们首先进入路径<code>themes/next/layout/_partials</code>，在该目录下新建一个<code>since.swig</code>文件，键入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;site-runtime&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clock-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;runtime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">isPC</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> userAgentInfo = navigator.<span class="property">userAgent</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> agents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; agents.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (userAgentInfo.<span class="title function_">indexOf</span>(agents[i]) &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">siteTime</span>(<span class="params">openOnPC, start</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;siteTime(openOnPC, start)&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#123;%- <span class="keyword">if</span> theme.<span class="property">runtime</span>.<span class="property">start</span> %&#125;</span></span><br><span class="line"><span class="language-javascript">      start = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;&#123;&#123; theme.runtime.start &#125;&#125;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#123;%- endif %&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> year = now.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> date = now.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hour = now.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> minute = now.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> second = now.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> diff = now - start;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> diffYears = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diff / years);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> diffDays = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff / days) - diffYears * <span class="number">365</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> diffHours = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff - (diffYears * <span class="number">365</span> + diffDays) * days) / hours);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> diffMinutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff - (diffYears * <span class="number">365</span> + diffDays) * days - diffHours * hours) / minutes);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> diffSeconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff - (diffYears * <span class="number">365</span> + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (openOnPC) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (diffYears == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;runtime&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行: &quot;</span> + diffDays + <span class="string">&quot; 天 &quot;</span> + diffHours + <span class="string">&quot; 小时 &quot;</span> + diffMinutes + <span class="string">&quot; 分钟 &quot;</span> + diffSeconds + <span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;runtime&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行: &quot;</span> + diffYears + <span class="string">&quot; 年 &quot;</span> + diffDays + <span class="string">&quot; 天 &quot;</span> + diffHours + <span class="string">&quot; 小时 &quot;</span> + diffMinutes + <span class="string">&quot; 分钟 &quot;</span> + diffSeconds + <span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (y == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;runtime&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行: &quot;</span> + diffDays + <span class="string">&quot;天 &quot;</span> + diffHours + <span class="string">&quot;小时 &quot;</span> + diffMinutes + <span class="string">&quot;分钟 &quot;</span> + diffSeconds + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;runtime&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行: &quot;</span> + diffYears + <span class="string">&quot;年 &quot;</span> + diffDays + <span class="string">&quot;天 &quot;</span> + diffHours + <span class="string">&quot;小时 &quot;</span> + diffMinutes + <span class="string">&quot;分钟 &quot;</span> + diffSeconds + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> showOnMobile = &#123;&#123; theme.<span class="property">runtime</span>.<span class="property">mobile</span> &#125;&#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> openOnPC = <span class="title function_">isPC</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">siteTime</span>(openOnPC, start);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!openOnPC &amp;&amp; !showOnMobile) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;site-runtime&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着，我们在该目录下找到<code>footer.swig</code>，在文件的最后键入以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.runtime.enable %&#125; &#123;% include &#x27;since.swig&#x27; %&#125; &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们进入路径<code>themes/next/_config.yml</code>，在主题配置文件中键入以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站运行时间</span></span><br><span class="line"><span class="attr">runtime:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">create_time:</span> <span class="string">&quot;04/15/2022 13:18:00&quot;</span> <span class="comment">#此处修改你的建站时间或者网站上线时间</span></span><br><span class="line">  <span class="attr">start:</span> <span class="number">2022-04-15 13:13:00</span> <span class="string">+0800</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7H2zi.png" alt="P7H2zi.png"></p>
<h4 id="统计网站访问量和文章阅读量"><a href="#统计网站访问量和文章阅读量" class="headerlink" title="统计网站访问量和文章阅读量"></a>统计网站访问量和文章阅读量</h4><p>既然优化到了 网站的页脚，那我们顺带统计一下网站的访问量和文章阅读量。<code>next</code>主题集成了一个第三方插件：<code>busuanzi</code>，中文名也叫不蒜子。</p>
<p>怎么设置呢？我们进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>busuanzi_count</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7H0t8.png" alt="P7H0t8.png"></p>
<h4 id="统计文章字数以及阅读时长"><a href="#统计文章字数以及阅读时长" class="headerlink" title="统计文章字数以及阅读时长"></a>统计文章字数以及阅读时长</h4><p>统计文章字数以及阅读时长，需要用到额外的依赖包，我们首先下载到本地中，在终端中进入你的项目根目录<code>blog</code>，键入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>顺带提一嘴，还没安装淘宝镜像的同学，赶紧麻溜地去安装，这下载速度提升得不是一点半点：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm install cnpm -g --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>安装完<code>cnpm</code>后，凡是用到<code>npm</code>命令的时候，都换成<code>cnpm</code>。</p>
<p><code>OK</code>，安装完<code>hexo-symbols-count-time</code>后，我们进入项目根目录<code>blog</code>，找到站点配置文件<code>_config.yml</code>，找个空地键入：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字数和阅读市场</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">true</span> <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>

<p>然后进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>symbols_count_time</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HCIk.png" alt="P7HCIk.png"></p>
<h4 id="启用动态背景"><a href="#启用动态背景" class="headerlink" title="启用动态背景"></a>启用动态背景</h4><p><code>next</code>主题集成了多种风格的动态背景，例如<code>canvas nest</code>和<code>JS 3D library</code>。笔者使用的是线条风格的<code>canvas nest</code>。</p>
<p>首先我们在终端中键入命令（此时你的终端路径应该是项目根目录<code>blog</code>，例如笔者的是<code>E:\System_disk_app\blog</code>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br></pre></td></tr></table></figure>

<p>此时，路径切换到了<code>next</code>主题下，然后键入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<p>安装好后，键入以下命令回滚到原项目路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../..</span><br></pre></td></tr></table></figure>

<p>进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>canvas_nest</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,0&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7HKUe.png" alt="P7HKUe.png"></p>
<h4 id="布置背景图片"><a href="#布置背景图片" class="headerlink" title="布置背景图片"></a>布置背景图片</h4><p>不少同学是二次元死忠粉，想要往自己网站部署动漫背景图。我们进入路径<code>blog/source/_data/styles.styl</code>（如果找不到这个文件，请移步：<a href="https://dongyaoo.com/49d4f7cf52bf.html">搭建个人主页保姆级教程（三）</a>完成之前的配置），添加以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*添加背景图*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/background.png</span>); <span class="comment">/*自定义的图片*/</span></span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>; <span class="comment">/*拉伸到全屏显示*/</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/*拒绝重复填充*/</span></span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed; <span class="comment">/*固定图层，不随鼠标滚动而滚动*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*文章透明度*/</span></span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*侧边框的透明度设置*/</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*菜单栏的透明度设置*/</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果设置了本地搜索，设置它的透明度*/</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>background</code>字段是你的图片地址，存放的路径为：<code>themes/next/source/images</code>。</p>
<h4 id="设置页面顶部阅读进度条"><a href="#设置页面顶部阅读进度条" class="headerlink" title="设置页面顶部阅读进度条"></a>设置页面顶部阅读进度条</h4><p>我们依旧在终端中依次执行以下命令，切换到<code>next</code>主题路径下载依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span><br><span class="line">cd ../..</span><br></pre></td></tr></table></figure>

<p>然后进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>reading_progress</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#fc6423&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7Hhwy.png" alt="P7Hhwy.png"></p>
<h4 id="设置回到顶部按钮"><a href="#设置回到顶部按钮" class="headerlink" title="设置回到顶部按钮"></a>设置回到顶部按钮</h4><p>进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>back2top</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7Hjxr.png" alt="P7Hjxr.png"></p>
<h4 id="设置个人头像"><a href="#设置个人头像" class="headerlink" title="设置个人头像"></a>设置个人头像</h4><p>进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>avatar</code>字段，<code>url</code>可以是本地图片，我们只需要把头像放到<code>themes/next/source/images</code>路径下即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s6.jpg.cm/2022/07/24/P7H965.png" alt="P7H965.png"></p>
<h4 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h4><p>现在可以看到网站的图标还是<code>next</code>图片，我们可以将其替换为自己喜欢的<code>icon</code>图标。例如，可以到<a href="https://www.iconfont.cn/">iconfont</a>去逛逛。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7HTEC.png" alt="P7HTEC.png"></p>
<p>下载<code>16x16</code>和<code>32x32</code>尺寸的图标后，进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>favicon</code>字段。<code>small</code>是<code>16x16</code>的，<code>medium</code>是<code>32x32</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/fa_16x16.svg</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/fa_32x32.svg</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br></pre></td></tr></table></figure>

<h4 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h4><p>进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>social</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/dongyaoo</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="string">https://www.zhihu.com/people/dongyaoo_HIT</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-lightbulb</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://blog.csdn.net/qq_41911142?type=blog</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bolt</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>||</code>前面的<code>url</code>是你想要链接的网址。<code>fab</code>或者<code>fa</code>是默认的图标样式，像我这样配置即可，不用修改。<code>fa-xxx</code>是<code>fontAwesome</code>网站上的图标名。不知道怎么设置的同学还请移步<a href="https://dongyaoo.com/49d4f7cf52bf.html">搭建个人主页保姆级教程（三）</a>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Hajt.png" alt="P7Hajt.png"></p>
<h4 id="设置-RSS-订阅"><a href="#设置-RSS-订阅" class="headerlink" title="设置 RSS 订阅"></a>设置 RSS 订阅</h4><p>大家可以看到，上一小节的图中，我们没有设置<code>RSS</code>。<code>RSS</code>是什么呢？</p>
<p><code>RSS</code>的全称为<code>Really Simple Syndication</code>，中文名为简易信息聚合。它是一种使用<code>XML</code>向其它网站分发某个网站上的网络内容的方法。这样其它人可以对该网站的新闻和更新进行快速浏览。换句话来讲，<code>RSS</code>可以让别人快速知道你的网站是干啥的。</p>
<p>怎么配置呢？工欲善其事必先利其器，我们先下载插件：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在项目的根目录<code>blog</code>中找到站点配置文件<code>_config.yml</code>，找个空地添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RSS</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>OK</code>，然后我们像上一小节演示的那样，在主题配置文件的<code>social</code>字段中添加上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure>

<h4 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h4><p>侧边栏空地儿还很大，我们添加个友链耍耍。进入路径<code>themes/next/_config.yml</code>，在主题配置文件中修改<code>links</code>字段：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">东曜说:</span> <span class="string">https://www.dongyaoo.com</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>终于解决了hexo开启懒加载后图片无法立即显示的问题</title>
    <url>/3ccadc9f6caa.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>本文主要介绍<code>hexo-lazyload-image</code>插件引发的<code>bug</code>以及相关<code>API</code></p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>笔者最近在折腾<code>hexo</code>搭建的个人主页：<a href="https://dongyaoo.com/">东曜说</a> 的时候，遇到了这样一个 <code>bug</code>：</p>
<p>网站开启图片懒加载后，首次加载页面图片不显示，但是刷新一次后会显示。</p>
<p>我的插件版本是：<code>hexo-lazyload-image v1.0.10</code> 。</p>
<h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>笔者为了提升网页的浏览体验，开启了<code>pjax</code>优化，其原理在于<code>pjax</code>封装了<code>ajax</code>实现局部刷新，将网站变成了单页面应用。</p>
<p>懒加载插件如果配置不当，将与<code>pjax</code>插件发生冲突，导致以上<code>bug</code>。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>找到<code>hexo</code>项目的根目录下的站点配置文件<code>_config.yml</code>，具体路径：<code>blog/_config.yml</code>，其中<code>blog</code>是你的项目文件夹。</p>
<p>找到<code>lazyload</code>配置，添上<code>isSPA: true</code>字段即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># optional eg ./images/loading.gif</span></span><br><span class="line">  <span class="attr">isSPA:</span> <span class="literal">true</span> <span class="comment"># optional</span></span><br></pre></td></tr></table></figure>

<h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><p>我们来仔细研究一下<code>hexo-lazyload-image</code> 插件的<code>API</code>，它共有<code>5</code>个配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># optional eg ./images/loading.gif</span></span><br><span class="line">  <span class="attr">isSPA:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">preloadRatio:</span> <span class="number">3</span> <span class="comment"># optional, default is 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>onlypost</code><ul>
<li><code>true</code>：只有路由页面或者文章的图片才会被懒加载。</li>
<li><code>false</code>：除了站点背景图（如果有的话），整个站点的图片均会被懒加载。</li>
</ul>
</li>
<li><code>loadingImg</code>：指定的话，加载自定义路径的图片用作文章图片加载时显示，不指定的话显示默认图片。</li>
<li><code>isSPA</code><ul>
<li><code>true</code>：针对单页面应用，当滚动条滚动到图片位置时就会向后端请求图片</li>
<li><code>false</code>：刷新才能请求图片</li>
<li><code>preloadRatio</code>：在多少倍的可见区域时触发图片请求，默认为<code>1</code>，即当前屏幕的区域。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
        <tag>hexo</tag>
        <tag>懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title>讲讲如何优雅地扒歌词</title>
    <url>/f8465742ea8f.html</url>
    <content><![CDATA[<h4 id="干货时刻"><a href="#干货时刻" class="headerlink" title="干货时刻"></a>干货时刻</h4><p>这篇文章来聊聊如何优雅地扒下来网易云音乐、QQ 音乐网站的歌词。</p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>笔者最近在测试一款浏览器音乐插件时发现了一个奇奇怪怪的知识，就是<strong>如何优雅地扒下来类似网易云、<code>QQ</code>音乐等音乐网站的歌词</strong>，有的同学可能会觉得扒歌词有手就行，直接<code>Ctrl CV</code>就搞定了。诚然，如果只拿歌词发个朋友圈复制粘贴足够，但是对于有建立音视频类型应用需求的同学来说还不够，因为用在应用中的音频、歌词都是分开储存的，而且歌词都是以<code>lrc</code>后缀保存的。下图为例，所以这篇文章跟各位同学分享一下心得。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Jsk5.png" alt="P7Jsk5.png"></p>
<h4 id="网易云音乐（lrc-字符串格式）"><a href="#网易云音乐（lrc-字符串格式）" class="headerlink" title="网易云音乐（lrc 字符串格式）"></a>网易云音乐（lrc 字符串格式）</h4><p>相信有不少同学都是云村的村民，那就先来聊聊云村歌词的扒法，我们首先进入官网：<a href="https://music.163.com/">网易云音乐官网</a>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Jp2z.png" alt="P7Jp2z.png"></p>
<p>我们搜个<code>VIP</code>专享的歌吧（免费的歌也一样）：陶喆的 <a href="https://music.163.com/#/song?id=150520">Melody</a>。这首歌无论是<code>melody</code>还是歌词都很棒~~</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Jk7t.png" alt="P7Jk7t.png"></p>
<p>接下来打开浏览器的开发者工具（按快捷键<code>F12</code>），笔者用的是<code>Chrome</code>，也就是谷歌浏览器。切换到<code>Network</code>这个<code>Tab</code>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JmSR.png" alt="P7JmSR.png"></p>
<p>这个<code>Network</code>的功能就是用来抓取向网站服务器发送<code>http</code>请求的数据包。我们这时刷新一下网页（按<code>F5</code>或者点击网页的刷新按钮）。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JEyC.png" alt="P7JEyC.png"></p>
<p>可以发现它已经帮我们抓取了各种类型的数据包，但是太多了，哪个是歌词的包？我们可以在下图第一个红框处键入<code>lyr</code>，这个框就是利用数据包名来过滤文件的。下图第二个红框圈出来的就是歌词的数据包。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JwPu.png" alt="P7JwPu.png"></p>
<p>我们右键这个包，点击<code>copy response</code>。这会把包的响应复制下来。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JouG.png" alt="P7JouG.png"></p>
<p>接着，切换到<code>console</code>页，这个页面是浏览器的控制台终端，可以执行<code>JS</code>代码。切换到这页后，首先点击下图这个按钮清空一下无关的信息。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J444.png" alt="P7J444.png"></p>
<p>然后，键入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">v = xxx;</span><br></pre></td></tr></table></figure>

<p>注意<code>xxx</code>是你之前复制好的数据包响应数据，这里在输入<code>V = </code>后，直接<code>Ctrl V</code>粘贴，再敲回车即可。</p>
<p>接着键入：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v<span class="selector-class">.lrc</span>.lyric</span><br></pre></td></tr></table></figure>

<p>即可拿到歌词的<code>lrc</code>格式的字符串，这里可以直接复制下来，或者后续进行二次加工。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JBMX.png" alt="P7JBMX.png"></p>
<h4 id="QQ-音乐（lrc-文件格式）"><a href="#QQ-音乐（lrc-文件格式）" class="headerlink" title="QQ 音乐（lrc 文件格式）"></a>QQ 音乐（lrc 文件格式）</h4><p>基于上节的基础，我们这节就好讲多了，区别不大。我们首先搜一首周董的：<a href="https://y.qq.com/n/ryqq/songDetail/0017K7gL4WYnw2">反方向的钟</a>。</p>
<p>接着我们打开<code>F12</code>的<code>Network</code>。在数据包过滤框输入<code>lyr</code>看一下：</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JgVD.png" alt="P7JgVD.png"></p>
<p><code>OK</code>，就是这个包没错了。左键打开看一下：</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7Jzkp.png" alt="P7Jzkp.png"></p>
<p>这时发现它的响应数据中，<code>lyric</code>字段是一堆乱码，起初我看到这个也有点小懵，很快，我想到它是不是被加密了，而且模样很像<code>base64</code>。有猜想了，就去解密试一下吧。我们首先复制好这段字符串。然后在字符串的位置右键，点击<code>copy value</code>。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J096.png" alt="P7J096.png"></p>
<p>找一个在线加解密的网站，这里贴一个现成的：<a href="https://tool.chinaz.com/tools/base64.aspx">在线 Base 64 解密</a>。进入后，将复制的字符串粘贴好，如图所示，点击解码。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7J37T.png" alt="P7J37T.png"></p>
<p>可以，猜想得到验证，将<code>[00:00:00]</code>之前没用的删去，就是完整的歌词啦，保存进<code>lrc</code>后缀的文件使用即可。</p>
<p>如果还想用类似网易云那样的<code>lrc</code> 字符，可以用几行<code>python</code>代码转化一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;歌词.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span>.join(lines)</span><br><span class="line"><span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<p>比如，你可以新建一个歌词.txt，然后将上面输出的歌词粘贴到里面，运行代码即可。</p>
<p><img src="https://s6.jpg.cm/2022/07/24/P7JCSE.png" alt="P7JCSE.png"></p>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>歌词</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手重装 windows 系统</title>
    <url>/29bb6eeb63ca.html</url>
    <content><![CDATA[<h4 id="说在前头"><a href="#说在前头" class="headerlink" title="说在前头"></a>说在前头</h4><p>笔者重装了一波<code>win10</code>系统，特此分享一下安装经验，请认真参考。</p>
<p>笔者强烈不建议用百度或者知乎营销号推荐的系统一键重装工具，会给你绑定安装一系列的垃圾软件。另外，也不要去安装<code>Ghost</code>系统，这类系统是经过别人重做过的，非官方，稳定性和安全性不能保证，可能还乱弹广告。</p>
<p>因为重装系统，无法截图，所以重启后电脑后的图片均为手机拍摄，见谅。</p>
<h4 id="实验演示的设备"><a href="#实验演示的设备" class="headerlink" title="实验演示的设备"></a>实验演示的设备</h4><ul>
<li><p>华硕<code>GL533VD</code>笔记本</p>
</li>
<li><p><code>32G</code>的<code>U</code>盘一个</p>
</li>
<li><p>微软原版<code>windows 10</code>系统消费者版（消费者版是一列版本的集合，覆盖专业版、家庭版等），笔者最后安装的<code>win10</code>专业版。</p>
</li>
</ul>
<p>我选择重装系统的方式是通过<code>U</code>盘重装，原因在于<code>U</code>盘是纯离线、即插即拔的，十分方便。再者，当电脑文件损坏或者中病毒导致无法正常开机时，<code>U</code>盘就发挥了重要作用。</p>
<h4 id="重装系统前的准备"><a href="#重装系统前的准备" class="headerlink" title="重装系统前的准备"></a>重装系统前的准备</h4><p>一般情况下重装系统都需要先格式化<code>C</code>盘，把旧系统删掉，然后将新系统安装在<code>C</code>盘。非<code>C</code>盘的文件除非自己选择，否则是不受影响的。因此，我们在重装系统前，先将<code>C</code>盘重要的数据文件进行备份迁移。例如下图所示的文件夹内的文件：</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRMAs.png" alt="FRMAs.png"></p>
<p>安装在<code>C</code>盘的软件就随它格式化了吧，之后重新安装。</p>
<h4 id="制作系统启动U盘"><a href="#制作系统启动U盘" class="headerlink" title="制作系统启动U盘"></a>制作系统启动U盘</h4><p>现在的<code>windows</code>系统大小一般都超过了<code>4G</code>，因此请准备一个<code>8G</code>起步的<code>U</code>盘作为系统启动<code>U</code>盘。</p>
<p><code>Ventoy</code>是一个制作系统启动<code>U</code>盘的开源工具，其优点在于经过它制作后的<code>U</code>盘可以同时存放多个系统，包括<code>windows</code>系列的和<code>linux</code>系列的。我们首先进入<a href="https://www.ventoy.net/cn/index.html">官网</a>，在下载页面中找到蓝奏云的链接，下载最新的版本。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRqnS.png" alt="FRqnS.png"></p>
<p>下载到的是个压缩包，进入解压即可得到下图所示文件。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FPw5B.png" alt="FPw5B.png"></p>
<p>这时，我们先插入<code>U</code>盘，再打开<code>Ventoy2Disk.exe</code>。如下图所示，红框代表<code>Ventoy</code>识别的设备（我演示用的<code>32</code>G<code>U</code>盘）。如果你的<code>U</code>盘已经做成了系统启动盘，那么红箭头所指的就是你<code>U</code>盘版本，如果是第一次做，这个红箭头的位置是空的，代表你的<code>U</code>盘尚未被格式化。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FROSK.png" alt="FROSK.png"></p>
<p>我们第一次做启动盘，就点击<code>安装</code>，它会提示你是否格式化数据，同意即可。已经格式化过的就点击<code>升级</code>。安装完成后，系统启动<code>U</code>盘就制作完毕了。</p>
<h4 id="准备系统镜像"><a href="#准备系统镜像" class="headerlink" title="准备系统镜像"></a>准备系统镜像</h4><p>我们进入<a href="https://next.itellyou.cn/">MSDN的新站点</a>，下载所需的系统镜像文件。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRawa.png" alt="FRawa.png"></p>
<p>下图所示的，即为<code>win10</code>消费者版的下载界面，复制<code>BT</code>链接后，打开迅雷即可创建一个下载任务。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRB6C.png" alt="FRB6C.png"></p>
<p>下载完的文件是一个<code>ISO</code>后缀的系统镜像文件，将其复制到我们制作好的<code>U</code>盘（<code>Ventoy（G）</code>）中。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FR5DN.png" alt="FR5DN.png"></p>
<h4 id="额外准备一手"><a href="#额外准备一手" class="headerlink" title="额外准备一手"></a>额外准备一手</h4><p>如果同学们没有采用官方的系统镜像或者安装老版本的系统，那么很可能安装后的系统中一个驱动也没有，而且处于断网状态。所以，我们首先下载一个驱动精灵万能网卡版（<code>exe</code>文件），不用安装，将其存入另一个<code>U</code>盘中备用，等安完系统了再根据情况是否需要安装这个软件。</p>
<p>这个软件可以在重装系统后的离线状态下给你安装适合自己电脑型号的网卡驱动，之后就可以连上网了，再下载安装其他驱动就很方便了（比如继续通过驱动精灵或者鲁大师安装声卡、外设等驱动）。</p>
<h4 id="U盘启动热键"><a href="#U盘启动热键" class="headerlink" title="U盘启动热键"></a>U盘启动热键</h4><p>由于电脑牌子的不同，<code>U</code>盘启动的快捷键也就不一样。下表列举了常见的各品牌电脑的快捷键，如果在该表中找不到自己对应的品牌，可以自行百度，百度不到可以参考表中的进行尝试。</p>
<table>
<thead>
<tr>
<th align="center">组装台式机</th>
<th align="center">笔记本</th>
<th align="center">品牌一体机</th>
</tr>
</thead>
<tbody><tr>
<td align="center">华硕主板 F8</td>
<td align="center">联想 F12</td>
<td align="center">联想 F12</td>
</tr>
<tr>
<td align="center">技嘉主板 F12</td>
<td align="center">华硕 ESC</td>
<td align="center">惠普 F12</td>
</tr>
<tr>
<td align="center">微星主板 F11</td>
<td align="center">宏基 F12</td>
<td align="center">宏基 F12</td>
</tr>
<tr>
<td align="center">映泰主板 F9</td>
<td align="center">惠普 F9</td>
<td align="center">戴尔 ESC</td>
</tr>
<tr>
<td align="center">梅捷主板 ESC 或 F12</td>
<td align="center">联想 Thinkpad F12</td>
<td align="center">神舟 F12</td>
</tr>
<tr>
<td align="center">七彩虹主板 ESC 或 F12</td>
<td align="center">戴尔 F12</td>
<td align="center">华硕 F8</td>
</tr>
<tr>
<td align="center">华擎主板 F11</td>
<td align="center">神舟 F12</td>
<td align="center">方正 F12</td>
</tr>
<tr>
<td align="center">斯巴达卡主板 ESC</td>
<td align="center">三星 F12</td>
<td align="center">清华同方 F12</td>
</tr>
<tr>
<td align="center">昂达主板 F11</td>
<td align="center">东芝 F12</td>
<td align="center">海尔 F12</td>
</tr>
<tr>
<td align="center">双敏主板 ESC</td>
<td align="center">IBM F12</td>
<td align="center">明基 F8</td>
</tr>
<tr>
<td align="center">翔升主板 F10</td>
<td align="center">海尔 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">精英主板 ESC或 F11</td>
<td align="center">方正 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">冠盟主板 F11 或 F12</td>
<td align="center">富士通 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">富士康主板 ESC 或 F12</td>
<td align="center">清华同方 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">顶星主板 F11 或 F12</td>
<td align="center">微星 F11</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">铭瑄主板 ESC</td>
<td align="center">明基 F9</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">盈通主板 F8</td>
<td align="center">技嘉 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">捷波主板 ESC</td>
<td align="center">Gateway F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Inter 主板 F12</td>
<td align="center">eMachines F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">杰微主板 ESC 或 F8</td>
<td align="center">苹果 长按option建</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">致铭主板 F12</td>
<td align="center">索尼 ESC</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">磐英主板 ESC</td>
<td align="center">小米 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">磐正主板 ESC</td>
<td align="center">华为 F12</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">冠铭主板 F9</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h4><p>将<code>U</code>盘插入电脑的<code>USB</code>口，然后开机，进入下图的<code>logo</code>加载页面时，连续按从<code>U</code>盘启动的快捷键，笔者是疯狂按<code>ESC</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRUkL.jpg" alt="FRUkL.jpg"></p>
<p>一般情况下会进入到下图所示的界面，让你选择<code>boot</code>服务（这个界面操作时忘拍了，下面这样图是网上的，清晰度堪忧，不过影响不大）。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRWpi.png" alt="FRWpi.png"></p>
<p><code>boot</code>服务页面的第一项是原来的<code>C</code>盘的系统，第二项<code>UEFI</code>开头的代表<code>U</code>盘启动，第三项则是进入<code>BIOS</code>界面。直接选择第二项，回车。我们就会进入下图所示的<code>Ventoy</code>引导页面。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRbYX.jpg" alt="FRbYX.jpg"></p>
<p>但是，笔者在选择<code>boot</code>服务页面回车<code>UEFI</code>后，出现<code>secure control</code>的报错，导致无法进入<code>Ventoy</code>的引导页。原因是华硕笔记本的安全控制，因为现在<code>Ventoy</code>制作的<code>U</code>盘启动属于传统的<code>MBR</code>设备，所以需要在<code>boot</code>菜单开启<code>CSM</code>支持。</p>
<p>我们在上面这个页面，直接选择第三项<code>set up</code>。</p>
<p>接着就到了设备的<code>BIOS</code>界面，下图所示的是华硕的<code>BIOS EZ</code>模式，简单说就是精简模式。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRx5t.png" alt="FRx5t.png"></p>
<p>我们按<code>F7</code>进入<code>Advance</code>模式，就是高级模式，如下图所示。操控小键盘的上下左右按键可以移动，我们找到<code>Security</code>菜单下的<code>Secure Boot</code>，回车。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRzKx.jpg" alt="FRzKx.jpg"></p>
<p>跳转到下图，将其中的<code>Secure Boot Control</code>字段改成<code>Disabled</code>，这个操作的意义就是关闭安全控制。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRFSj.jpg" alt="FRFSj.jpg"></p>
<p>然后进入<code>Boot</code>菜单下，将<code>CSS Supoort</code>改为<code>Enabled</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRhwp.jpg" alt="FRhwp.jpg"></p>
<p>改完后，按<code>F10</code>保存设置退出。这时，我们就会退回到选择<code>boot</code>服务的界面，找到<code>U</code>盘启动的选项回车，即可到<code>Ventoy</code>的引导页。</p>
<p>在<code>Ventoy</code>引导页，我们可以看到自己在<code>U</code>盘中放的<code>ISO</code>镜像文件，选择自己想安装的系统，回车即可。接下来笔者在<code>logo</code>页等待片刻，即可跳转到下图。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FR1DY.jpg" alt="FR1DY.jpg"></p>
<p>点击<code>下一页</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRn1U.jpg" alt="FRn1U.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FR78v.jpg" alt="FR78v.jpg"></p>
<p>目前我们不需要产品密钥，直接点<code>我没有产品密钥</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRexq.jpg" alt="FRexq.jpg"></p>
<p>下图我们选择专业版即可，点击<code>下一步</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRrpc.jpg" alt="FRrpc.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FRAfr.jpg" alt="FRAfr.jpg"></p>
<p>我们在下图选择<code>自定义安装</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRZBM.jpg" alt="FRZBM.jpg"></p>
<p>下图所示的是电脑磁盘的分区，我电脑上有三个磁盘，驱动器<code>2</code>是我的<code>C</code>盘，是个256<code>G</code>的固态硬盘。点击格式化，把原<code>C</code>盘格掉，它会提示你数据都会被清除，确认即可。其他的驱动器你可以全格了，也可以保留。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRvKG.jpg" alt="FRvKG.jpg"></p>
<p>格式化完后，选择你的<code>C</code>盘，点击<code>下一步</code>。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FRy01.jpg" alt="FRy01.jpg"></p>
<p>接着就会跳转到安装界面，静待它完成。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FHndr.jpg" alt="FHndr.jpg"></p>
<p>完成后，系统会重启几次，接着就会出现下面一系列的图，进行初始化配置，大家可以参考我的。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FHdaX.jpg" alt="FHdaX.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FHVGx.jpg" alt="FHVGx.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FHYIj.jpg" alt="FHYIj.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FHlhp.jpg" alt="FHlhp.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FHset.jpg" alt="FHset.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FH9tU.jpg" alt="FH9tU.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FHjjY.jpg" alt="FHjjY.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FH6Wv.jpg" alt="FH6Wv.jpg"></p>
<p><img src="https://i.imgtg.com/2022/05/19/FH8gq.jpg" alt="FH8gq.jpg"></p>
<p><code>OK</code>，下图所示成功进入系统。</p>
<p><img src="https://i.imgtg.com/2022/05/19/FHXsc.jpg" alt="FHXsc.jpg"></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
</search>
